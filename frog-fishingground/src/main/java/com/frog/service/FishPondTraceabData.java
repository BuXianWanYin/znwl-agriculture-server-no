package com.frog.service;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionEncoder;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.DynamicStruct;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint64;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple10;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple11;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple5;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple6;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple7;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple8;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple9;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class FishPondTraceabData extends Contract {
    public static final String[] BINARY_ARRAY = {"","","ffffff168152602001600182018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611b905780601f10611b6557610100808354040283529160200191611b90565b820191906000526020600020905b815481529060010190602001808311611b7357829003601f168201915b50505050508152602001600282018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611c325780601f10611c0757610100808354040283529160200191611c32565b820191906000526020600020905b815481529060010190602001808311611c1557829003601f168201915b50505050508152602001600382018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611cd45780601f10611ca957610100808354040283529160200191611cd4565b820191906000526020600020905b815481529060010190602001808311611cb757829003601f168201915b50505050508152602001600482018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611d765780601f10611d4b57610100808354040283529160200191611d76565b820191906000526020600020905b815481529060010190602001808311611d5957829003601f168201915b50505050508152602001600582018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611e185780601f10611ded57610100808354040283529160200191611e18565b820191906000526020600020905b815481529060010190602001808311611dfb57829003601f168201915b50505050508152602001600682018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611eba5780601f10611e8f57610100808354040283529160200191611eba565b820191906000526020600020905b815481529060010190602001808311611e9d57829003601f168201915b50505050508152602001600782018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611f5c5780601f10611f3157610100808354040283529160200191611f5c565b820191906000526020600020905b815481529060010190602001808311611f3f57829003601f168201915b50505050508152602001600882018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611ffe5780601f10611fd357610100808354040283529160200191611ffe565b820191906000526020600020905b815481529060010190602001808311611fe157829003601f168201915b50505050508152602001600982018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156120a05780601f10612075576101008083540402835291602001916120a0565b820191906000526020600020905b81548152906001019060200180831161208357829003601f168201915b50505050508152505081526020019060010190611aa1565b50505050905090565b600a8054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156121575780601f1061212c57610100808354040283529160200191612157565b820191906000526020600020905b81548152906001019060200180831161213a57829003601f168201915b505050505081565b60075481565b606080825167ffffffffffffffff8111801561218057600080fd5b506040519080825280602002602001820160405280156121ba57816020015b6121a7619357565b81526020019060019003908161219f5790505b50905060008090505b83518167ffffffffffffffff1610156128385760136000858367ffffffffffffffff16815181106121f057fe5b602002602001015167ffffffffffffffff1667ffffffffffffffff168152602001908152602001600020604051806101400160405290816000820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff168152602001600182018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156122f15780601f106122c6576101008083540402835291602001916122f1565b820191906000526020600020905b8154815290600101906020018083116122d457829003601f168201915b50505050508152602001600282018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156123935780601f1061236857610100808354040283529160200191612393565b820191906000526020600020905b81548152906001019060200180831161237657829003601f168201915b50505050508152602001600382018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156124355780601f1061240a57610100808354040283529160200191612435565b820191906000526020600020905b81548152906001019060200180831161241857829003601f168201915b50505050508152602001600482018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156124d75780601f106124ac576101008083540402835291602001916124d7565b820191906000526020600020905b8154815290600101906020018083116124ba57829003601f168201915b50505050508152602001600582018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156125795780601f1061254e57610100808354040283529160200191612579565b820191906000526020600020905b81548152906001019060200180831161255c57829003601f168201915b50505050508152602001600682018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561261b5780601f106125f05761010080835404028352916020019161261b565b820191906000526020600020905b8154815290600101906020018083116125fe57829003601f168201915b50505050508152602001600782018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156126bd5780601f10612692576101008083540402835291602001916126bd565b820191906000526020600020905b8154815290600101906020018083116126a057829003601f168201915b50505050508152602001600882018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561275f5780601f106127345761010080835404028352916020019161275f565b820191906000526020600020905b81548152906001019060200180831161274257829003601f168201915b50505050508152602001600982018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156128015780601f106127d657610100808354040283529160200191612801565b820191906000526020600020905b8154815290600101906020018083116127e457829003601f168201915b505050505081525050828267ffffffffffffffff168151811061282057fe5b602002602001018190525080806001019150506121c3565b5080915050919050565b606080825167ffffffffffffffff8111801561285d57600080fd5b5060405190808252806020026020018201604052801561289757816020015b6128846193b4565b81526020019060019003908161287c5790505b50905060008090505b83518167ffffffffffffffff161015612e735760176000858367ffffffffffffffff16815181106128cd57fe5b602002602001015167ffffffffffffffff1667ffffffffffffffff168152602001908152602001600020604051806101200160405290816000820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff168152602001600182018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156129ce5780601f106129a3576101008083540402835291602001916129ce565b820191906000526020600020905b8154815290600101906020018083116129b157829003601f168201915b50505050508152602001600282018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612a705780601f10612a4557610100808354040283529160200191612a70565b820191906000526020600020905b815481529060010190602001808311612a5357829003601f168201915b50505050508152602001600382018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612b125780601f10612ae757610100808354040283529160200191612b12565b8201919060005260","","90602001808311613ae757829003601f168201915b50505050508152602001600582018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015613ba65780601f10613b7b57610100808354040283529160200191613ba6565b820191906000526020600020905b815481529060010190602001808311613b8957829003601f168201915b50505050508152602001600682018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015613c485780601f10613c1d57610100808354040283529160200191613c48565b820191906000526020600020905b815481529060010190602001808311613c2b57829003601f168201915b505050505081526020016007820160009054906101000a900460ff161515151581525050828267ffffffffffffffff1681518110613c8257fe5b602002602001018190525080806001019150506137f0565b5080915050919050565b60038054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015613d3a5780601f10613d0f57610100808354040283529160200191613d3a565b820191906000526020600020905b815481529060010190602001808311613d1d57829003601f168201915b505050505081565b60028054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015613dd85780601f10613dad57610100808354040283529160200191613dd8565b820191906000526020600020905b815481529060010190602001808311613dbb57829003601f168201915b505050505081565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614613eea576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f4116c50f890f20f8e526dfc5758fe8a4e630ae0b21cc5e480ab5fb1c4e05ad0b60405160405180910390a36040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613ee19061ad74565b60405180910390fd5b6000601760008b67ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1614613f75576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613f6c9061add4565b60405180910390fd5b613f7d6193b4565b6040518061012001604052808b67ffffffffffffffff1681526020018a8152602001898152602001888152602001878152602001868152602001858152602001848152602001838152509050601681908060018154018082558091505060019003906000526020600020906009020160009091909190915060008201518160000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550602082015181600101908051906020019061404092919061945b565b50604082015181600201908051906020019061405d92919061945b565b50606082015181600301908051906020019061407a92919061945b565b50608082015181600401908051906020019061409792919061945b565b5060a08201518160050190805190602001906140b492919061945b565b5060c08201518160060190805190602001906140d192919061945b565b5060e08201518160070190805190602001906140ee92919061945b565b5061010082015181600801908051906020019061410c92919061945b565b50505080601760008c67ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550602082015181600101908051906020019061418292919061945b565b50604082015181600201908051906020019061419f92919061945b565b5060608201518160030190805190602001906141bc92919061945b565b5060808201518160040190805190602001906141d992919061945b565b5060a08201518160050190805190602001906141f692919061945b565b5060c082015181600601908051906020019061421392919061945b565b5060e082015181600701908051906020019061423092919061945b565b5061010082015181600801908051906020019061424e92919061945b565b5090505050505050505050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614614368576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f4116c50f890f20f8e526dfc5758fe8a4e630ae0b21cc5e480ab5fb1c4e05ad0b60405160405180910390a36040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161435f9061ad74565b60405180910390fd5b600560009054906101000a900460ff16156143b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016143af9061ae34565b60405180910390fd5b6143c0619357565b6040518061014001604052808c67ffffffffffffffff1681526020018b81526020018a815260200189815260200188815260200187815260200186815260200185815260200184815260200183815250905060128190806001815401808255809150506001900390600052602060002090600a020160009091909190915060008201518160000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550602082015181600101908051906020019061448992919061945b565b5060408201518160020190805190602001906144a692919061945b565b5060608201518160030190805190602001906144c392919061945b565b5060808201518160040190805190602001906144e092919061945b565b5060a08201518160050190805190602001906144fd92919061945b565b5060c082015181600601908051906020019061451a92919061945b565b5060e082015181600701908051906020019061453792919061945b565b5061010082015181600801908051906020019061455592919061945b565b5061012082015181600901908051906020019061457392919061945b565b50505080601360008d67ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060208201518160010190805190602001906145e992919061945b565b50604082015181600201908051906020019061460692919061945b565b50606082015181600301908051906020019061462392919061945b565b50608082015181600401908051906020019061464092919061945b565b5060a082015181600501908051906020019061465d92919061945b565b5060c082015181600601908051906020019061467a92919061945b565b5060e082015181600701908051906020019061469792919061945b565b506101008201518160080190805190602001906146b592919061945b565b506101208201518160090190805190602001906146d392919061945b565b509050505050505050505050505050565b600560009054906101000a900460ff1681565b60115481565b600860009054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461481a576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f4116c50f890f20f8e526dfc5758fe8a4e630ae0b21cc5e480ab5fb1c4e05ad0b60405160405180910390a36040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016148119061ad74565b60405180910390fd5b600860009054906101000a900460ff161561486a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016148619061ad14565b60405180910390fd5b60108160405161487a919061ab92565b908152602001604051809103902060060160009054906101000a900460ff166148d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016148cf9061ad34565b60405180910390fd5b60006010826040516148ea919061ab92565b9081526020016040518091039020905060008160060160006101000a81548160ff02191690831515021790555060006011541161495c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016149539061ae74565b60405180910390fd5b60016011600082825403925050819055505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606014805480602002602001604051908101604052809291908181526020016000905b82821015614d4c57838290600052602060002090600602016040518060c00160405290816000820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff168152602001600182018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015614aac5780601f10614a8157610100808354040283529160200191614aac565b820191906000526020600020905b815481529060010190602001808311614a8f57829003601f168201915b50505050508152602001600282018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280","","","ffffffffffffffffffffffffffffffff1614616bbb576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f4116c50f890f20f8e526dfc5758fe8a4e630ae0b21cc5e480ab5fb1c4e05ad0b60405160405180910390a36040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401616bb29061ad74565b60405180910390fd5b600060115411616c00576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401616bf79061aed4565b60405180910390fd5b600860009054906101000a900460ff1615616c50576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401616c479061ad94565b60405180910390fd5b6001600860006101000a81548160ff021916908315150217905550565b60015481565b600560009054906101000a900460ff1615616cc3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401616cba9061ae34565b60405180910390fd5b60001515600d60008967ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060070160009054906101000a900460ff16151514616d41576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401616d389061add4565b60405180910390fd5b616d4961940a565b6040518061010001604052808967ffffffffffffffff168152602001888152602001878152602001868152602001858152602001848152602001838152602001600115158152509050600c81908060018154018082558091505060019003906000526020600020906008020160009091909190915060008201518160000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506020820151816001019080519060200190616e0992919061945b565b506040820151816002019080519060200190616e2692919061945b565b506060820151816003019080519060200190616e4392919061945b565b506080820151816004019080519060200190616e6092919061945b565b5060a0820151816005019080519060200190616e7d92919061945b565b5060c0820151816006019080519060200190616e9a92919061945b565b5060e08201518160070160006101000a81548160ff021916908315150217905550505080600d60008a67ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506020820151816001019080519060200190616f3092919061945b565b506040820151816002019080519060200190616f4d92919061945b565b506060820151816003019080519060200190616f6a92919061945b565b506080820151816004019080519060200190616f8792919061945b565b5060a0820151816005019080519060200190616fa492919061945b565b5060c0820151816006019080519060200190616fc192919061945b565b5060e08201518160070160006101000a81548160ff0219169083151502179055509050505050505050505050565b60068054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156170855780601f1061705a57610100808354040283529160200191617085565b820191906000526020600020905b81548152906001019060200180831161706857829003601f168201915b505050505081565b60136020528060005260406000206000915090508060000160009054906101000a900467ffffffffffffffff1690806001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156171535780601f1061712857610100808354040283529160200191617153565b820191906000526020600020905b81548152906001019060200180831161713657829003601f168201915b505050505090806002018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156171f15780601f106171c6576101008083540402835291602001916171f1565b820191906000526020600020905b8154815290600101906020018083116171d457829003601f168201915b505050505090806003018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561728f5780601f106172645761010080835404028352916020019161728f565b820191906000526020600020905b81548152906001019060200180831161727257829003601f168201915b505050505090806004018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561732d5780601f106173025761010080835404028352916020019161732d565b820191906000526020600020905b81548152906001019060200180831161731057829003601f168201915b505050505090806005018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156173cb5780601f106173a0576101008083540402835291602001916173cb565b820191906000526020600020905b8154815290600101906020018083116173ae57829003601f168201915b505050505090806006018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156174695780601f1061743e57610100808354040283529160200191617469565b820191906000526020600020905b81548152906001019060200180831161744c57829003601f168201915b505050505090806007018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156175075780601f106174dc57610100808354040283529160200191617507565b820191906000526020600020905b8154815290600101906020018083116174ea57829003601f168201915b505050505090806008018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156175a55780601f1061757a576101008083540402835291602001916175a5565b820191906000526020600020905b81548152906001019060200180831161758857829003601f168201915b505050505090806009018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156176435780601f1061761857610100808354040283529160200191617643565b820191906000526020600020905b81548152906001019060200180831161762657829003601f168201915b505050505090508a565b6014818154811061765a57fe5b90600052602060002090600602016000915090508060000160009054906101000a900467ffffffffffffffff1690806001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156177205780601f106176f557610100808354040283529160200191617720565b820191906000526020600020905b81548152906001019060200180831161770357829003601f168201915b505050505090806002018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156177be5780601f10617793576101008083540402835291602001916177be565b820191906000526020600020905b8154815290600101906020018083116177a157829003601f168201915b505050505090806003018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561785c5780601f106178315761010080835404028352916020019161785c565b820191906000526020600020905b81548152906001019060200180831161783f57829003601f168201915b505050505090806004018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156178fa5780601f106178cf576101008083540402835291602001916178fa565b820191906000526020600020905b8154815290600101906020018083116178dd57829003601f168201915b505050505090806005018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156179985780601f1061796d57610100808354040283529160200191617998565b820191906000526020600020905b81548152906001019060200180831161797b57829003601f168201915b5050505050905086565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614617aac576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f4116c50f890f20f8e526dfc5758fe8a4e630ae0b21cc5e480ab5fb1c4e05ad0b60405160405180910390a36040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401617aa39061ad74565b60405180910390fd5b6000601560008867ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160009054906101000a900467ffffffffffffffff1667ff","","","","f7828261a1aa565b91505060e083015184820360e086015261ab11828261a1aa565b91505061010083015184820361010086015261ab2d828261a1aa565b91505061012083015184820361012086015261ab49828261a1aa565b9150508091505092915050565b61ab5f8161b4ed565b82525050565b61ab6e8161b4ed565b82525050565b61ab7d8161b4f7565b82525050565b61ab8c8161b4f7565b82525050565b600061ab9e828461a21c565b915081905092915050565b600060208201905061abbe6000830184619fa9565b92915050565b6000602082019050818103600083015261abde8184619fb8565b905092915050565b6000602082019050818103600083015261ac00818461a02d565b905092915050565b6000602082019050818103600083015261ac22818461a0a2565b905092915050565b6000602082019050818103600083015261ac44818461a117565b905092915050565b600060208201905061ac61600083018461a19b565b92915050565b6000602082019050818103600083015261ac81818461a1e3565b905092915050565b600060e082019050818103600083015261aca3818a61a1e3565b9050818103602083015261acb7818961a1e3565b905061acc6604083018861ab65565b61acd3606083018761ab65565b818103608083015261ace5818661a1e3565b905081810360a083015261acf9818561a1e3565b905061ad0860c083018461a19b565b98975050505050505050565b6000602082019050818103600083015261ad2d8161a24d565b9050919050565b6000602082019050818103600083015261ad4d8161a28d565b9050919050565b6000602082019050818103600083015261ad6d8161a2f3565b9050919050565b6000602082019050818103600083015261ad8d8161a333565b9050919050565b6000602082019050818103600083015261adad8161a399565b9050919050565b6000602082019050818103600083015261adcd8161a3d9565b9050919050565b6000602082019050818103600083015261aded8161a419565b9050919050565b6000602082019050818103600083015261ae0d8161a459565b9050919050565b6000602082019050818103600083015261ae2d8161a499565b9050919050565b6000602082019050818103600083015261ae4d8161a4d9565b9050919050565b6000602082019050818103600083015261ae6d8161a519565b9050919050565b6000602082019050818103600083015261ae8d8161a559565b9050919050565b6000602082019050818103600083015261aead8161a599565b9050919050565b6000602082019050818103600083015261aecd8161a5d9565b9050919050565b6000602082019050818103600083015261aeed8161a619565b9050919050565b6000602082019050818103600083015261af0d8161a67f565b9050919050565b6000602082019050818103600083015261af2d8161a6bf565b9050919050565b6000602082019050818103600083015261af4e818461a993565b905092915050565b600060208201905061af6b600083018461ab65565b92915050565b60006101608201905061af87600083018e61ab65565b818103602083015261af99818d61a1e3565b9050818103604083015261afad818c61a1e3565b9050818103606083015261afc1818b61a1e3565b905061afd0608083018a61a19b565b81810360a083015261afe2818961a1e3565b905081810360c083015261aff6818861a1e3565b905061b00560e083018761ab65565b81810361010083015261b018818661a1e3565b905061b02861012083018561a19b565b61b03661014083018461ab65565b9c9b505050505050505050505050565b600060c08201905061b05b600083018961ab83565b818103602083015261b06d818861a1e3565b9050818103604083015261b081818761a1e3565b9050818103606083015261b095818661a1e3565b9050818103608083015261b0a9818561a1e3565b905081810360a083015261b0bd818461a1e3565b9050979650505050505050565b60006101008201905061b0e0600083018b61ab83565b818103602083015261b0f2818a61a1e3565b9050818103604083015261b106818961a1e3565b9050818103606083015261b11a818861a1e3565b9050818103608083015261b12e818761a1e3565b905081810360a083015261b142818661a1e3565b905081810360c083015261b156818561a1e3565b905061b16560e083018461a19b565b9998505050505050505050565b60006101208201905061b188600083018c61ab83565b818103602083015261b19a818b61a1e3565b9050818103604083015261b1ae818a61a1e3565b9050818103606083015261b1c2818961a1e3565b9050818103608083015261b1d6818861a1e3565b905081810360a083015261b1ea818761a1e3565b905081810360c083015261b1fe818661a1e3565b905081810360e083015261b212818561a1e3565b905081810361010083015261b227818461a1e3565b90509a9950505050505050505050565b60006101408201905061b24d600083018d61ab83565b818103602083015261b25f818c61a1e3565b9050818103604083015261b273818b61a1e3565b9050818103606083015261b287818a61a1e3565b9050818103608083015261b29b818961a1e3565b905081810360a083015261b2af818861a1e3565b905081810360c083015261b2c3818761a1e3565b905081810360e083015261b2d7818661a1e3565b905081810361010083015261b2ec818561a1e3565b905081810361012083015261b301818461a1e3565b90509b9a5050505050505050505050565b6000604051905081810181811067ffffffffffffffff8211171561b33557600080fd5b8060405250919050565b600067ffffffffffffffff82111561b35657600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561b37e57600080fd5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600061b4ba8261b4cd565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600067ffffffffffffffff82169050919050565b82818337600083830152505050565b60005b8381101561b53857808201518184015260208101905061b51d565b8381111561b547576000848401525b50505050565b6000601f19601f8301169050919050565b61b5678161b4c1565b811461b57257600080fd5b50565b61b57e8161b4ed565b811461b58957600080fd5b50565b61b5958161b4f7565b811461b5a057600080fd5b5056fea26469706673582212204e50e98e485c702eb92a6dcc451b9b6b956205e7f8e0839d5ffded4ff22751a064736f6c634300060a0033"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","","","20600020905b815481529060010190602001808311612af557829003601f168201915b50505050508152602001600482018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612bb45780601f10612b8957610100808354040283529160200191612bb4565b820191906000526020600020905b815481529060010190602001808311612b9757829003601f168201915b50505050508152602001600582018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612c565780601f10612c2b57610100808354040283529160200191612c56565b820191906000526020600020905b815481529060010190602001808311612c3957829003601f168201915b50505050508152602001600682018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612cf85780601f10612ccd57610100808354040283529160200191612cf8565b820191906000526020600020905b815481529060010190602001808311612cdb57829003601f168201915b50505050508152602001600782018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612d9a5780601f10612d6f57610100808354040283529160200191612d9a565b820191906000526020600020905b815481529060010190602001808311612d7d57829003601f168201915b50505050508152602001600882018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612e3c5780601f10612e1157610100808354040283529160200191612e3c565b820191906000526020600020905b815481529060010190602001808311612e1f57829003601f168201915b505050505081525050828267ffffffffffffffff1681518110612e5b57fe5b602002602001018190525080806001019150506128a0565b5080915050919050565b60156020528060005260406000206000915090508060000160009054906101000a900467ffffffffffffffff1690806001018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612f435780601f10612f1857610100808354040283529160200191612f43565b820191906000526020600020905b815481529060010190602001808311612f2657829003601f168201915b505050505090806002018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612fe15780601f10612fb657610100808354040283529160200191612fe1565b820191906000526020600020905b815481529060010190602001808311612fc457829003601f168201915b505050505090806003018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561307f5780601f106130545761010080835404028352916020019161307f565b820191906000526020600020905b81548152906001019060200180831161306257829003601f168201915b505050505090806004018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561311d5780601f106130f25761010080835404028352916020019161311d565b820191906000526020600020905b81548152906001019060200180831161310057829003601f168201915b505050505090806005018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156131bb5780601f10613190576101008083540402835291602001916131bb565b820191906000526020600020905b81548152906001019060200180831161319e57829003601f168201915b5050505050905086565b601281815481106131d257fe5b90600052602060002090600a02016000915090508060000160009054906101000a900467ffffffffffffffff1690806001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156132985780601f1061326d57610100808354040283529160200191613298565b820191906000526020600020905b81548152906001019060200180831161327b57829003601f168201915b505050505090806002018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156133365780601f1061330b57610100808354040283529160200191613336565b820191906000526020600020905b81548152906001019060200180831161331957829003601f168201915b505050505090806003018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156133d45780601f106133a9576101008083540402835291602001916133d4565b820191906000526020600020905b8154815290600101906020018083116133b757829003601f168201915b505050505090806004018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156134725780601f1061344757610100808354040283529160200191613472565b820191906000526020600020905b81548152906001019060200180831161345557829003601f168201915b505050505090806005018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156135105780601f106134e557610100808354040283529160200191613510565b820191906000526020600020905b8154815290600101906020018083116134f357829003601f168201915b505050505090806006018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156135ae5780601f10613583576101008083540402835291602001916135ae565b820191906000526020600020905b81548152906001019060200180831161359157829003601f168201915b505050505090806007018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561364c5780601f106136215761010080835404028352916020019161364c565b820191906000526020600020905b81548152906001019060200180831161362f57829003601f168201915b505050505090806008018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156136ea5780601f106136bf576101008083540402835291602001916136ea565b820191906000526020600020905b8154815290600101906020018083116136cd57829003601f168201915b505050505090806009018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156137885780601f1061375d57610100808354040283529160200191613788565b820191906000526020600020905b81548152906001019060200180831161376b57829003601f168201915b505050505090508a565b606080825167ffffffffffffffff811180156137ad57600080fd5b506040519080825280602002602001820160405280156137e757816020015b6137d461940a565b8152602001906001900390816137cc5790505b50905060008090505b83518167ffffffffffffffff161015613c9a57600d6000858367ffffffffffffffff168151811061381d57fe5b602002602001015167ffffffffffffffff1667ffffffffffffffff168152602001908152602001600020604051806101000160405290816000820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff168152602001600182018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561391e5780601f106138f35761010080835404028352916020019161391e565b820191906000526020600020905b81548152906001019060200180831161390157829003601f168201915b50505050508152602001600282018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156139c05780601f10613995576101008083540402835291602001916139c0565b820191906000526020600020905b8154815290600101906020018083116139a357829003601f168201915b50505050508152602001600382018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015613a625780601f10613a3757610100808354040283529160200191613a62565b820191906000526020600020905b815481529060010190602001808311613a4557829003601f168201915b50505050508152602001600482018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015613b045780601f10613ad957610100808354040283529160200191613b04565b820191906000526020600020905b8154815290600101","90602001808311613ae757829003601f168201915b50505050508152602001600582018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015613ba65780601f10613b7b57610100808354040283529160200191613ba6565b820191906000526020600020905b815481529060010190602001808311613b8957829003601f168201915b50505050508152602001600682018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015613c485780601f10613c1d57610100808354040283529160200191613c48565b820191906000526020600020905b815481529060010190602001808311613c2b57829003601f168201915b505050505081526020016007820160009054906101000a900460ff161515151581525050828267ffffffffffffffff1681518110613c8257fe5b602002602001018190525080806001019150506137f0565b5080915050919050565b60038054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015613d3a5780601f10613d0f57610100808354040283529160200191613d3a565b820191906000526020600020905b815481529060010190602001808311613d1d57829003601f168201915b505050505081565b60028054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015613dd85780601f10613dad57610100808354040283529160200191613dd8565b820191906000526020600020905b815481529060010190602001808311613dbb57829003601f168201915b505050505081565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614613eea576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f4116c50f890f20f8e526dfc5758fe8a4e630ae0b21cc5e480ab5fb1c4e05ad0b60405160405180910390a36040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613ee19061ad74565b60405180910390fd5b6000601760008b67ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1614613f75576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613f6c9061add4565b60405180910390fd5b613f7d6193b4565b6040518061012001604052808b67ffffffffffffffff1681526020018a8152602001898152602001888152602001878152602001868152602001858152602001848152602001838152509050601681908060018154018082558091505060019003906000526020600020906009020160009091909190915060008201518160000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550602082015181600101908051906020019061404092919061945b565b50604082015181600201908051906020019061405d92919061945b565b50606082015181600301908051906020019061407a92919061945b565b50608082015181600401908051906020019061409792919061945b565b5060a08201518160050190805190602001906140b492919061945b565b5060c08201518160060190805190602001906140d192919061945b565b5060e08201518160070190805190602001906140ee92919061945b565b5061010082015181600801908051906020019061410c92919061945b565b50505080601760008c67ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550602082015181600101908051906020019061418292919061945b565b50604082015181600201908051906020019061419f92919061945b565b5060608201518160030190805190602001906141bc92919061945b565b5060808201518160040190805190602001906141d992919061945b565b5060a08201518160050190805190602001906141f692919061945b565b5060c082015181600601908051906020019061421392919061945b565b5060e082015181600701908051906020019061423092919061945b565b5061010082015181600801908051906020019061424e92919061945b565b5090505050505050505050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614614368576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f4116c50f890f20f8e526dfc5758fe8a4e630ae0b21cc5e480ab5fb1c4e05ad0b60405160405180910390a36040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161435f9061ad74565b60405180910390fd5b600560009054906101000a900460ff16156143b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016143af9061ae34565b60405180910390fd5b6143c0619357565b6040518061014001604052808c67ffffffffffffffff1681526020018b81526020018a815260200189815260200188815260200187815260200186815260200185815260200184815260200183815250905060128190806001815401808255809150506001900390600052602060002090600a020160009091909190915060008201518160000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550602082015181600101908051906020019061448992919061945b565b5060408201518160020190805190602001906144a692919061945b565b5060608201518160030190805190602001906144c392919061945b565b5060808201518160040190805190602001906144e092919061945b565b5060a08201518160050190805190602001906144fd92919061945b565b5060c082015181600601908051906020019061451a92919061945b565b5060e082015181600701908051906020019061453792919061945b565b5061010082015181600801908051906020019061455592919061945b565b5061012082015181600901908051906020019061457392919061945b565b50505080601360008d67ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060208201518160010190805190602001906145e992919061945b565b50604082015181600201908051906020019061460692919061945b565b50606082015181600301908051906020019061462392919061945b565b50608082015181600401908051906020019061464092919061945b565b5060a082015181600501908051906020019061465d92919061945b565b5060c082015181600601908051906020019061467a92919061945b565b5060e082015181600701908051906020019061469792919061945b565b506101008201518160080190805190602001906146b592919061945b565b506101208201518160090190805190602001906146d392919061945b565b509050505050505050505050505050565b600560009054906101000a900460ff1681565b60115481565b600860009054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461481a576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f4116c50f890f20f8e526dfc5758fe8a4e630ae0b21cc5e480ab5fb1c4e05ad0b60405160405180910390a36040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016148119061ad74565b60405180910390fd5b600860009054906101000a900460ff161561486a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016148619061ad14565b60405180910390fd5b60108160405161487a919061ab92565b908152602001604051809103902060060160009054906101000a900460ff166148d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016148cf9061ad34565b60405180910390fd5b60006010826040516148ea919061ab92565b9081526020016040518091039020905060008160060160006101000a81548160ff02191690831515021790555060006011541161495c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016149539061ae74565b60405180910390fd5b60016011600082825403925050819055505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606014805480602002602001604051908101604052809291908181526020016000905b82821015614d4c57838290600052602060002090600602016040518060c00160405290816000820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff168152602001600182018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015614aac5780601f10614a8157610100808354040283529160200191614aac565b820191906000526020600020905b815481529060010190602001808311614a8f57829003601f168201915b50505050508152602001600282018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280","","","","ffffffffffffff1614617b37576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401617b2e9061ae94565b60405180910390fd5b617b3f619562565b6040518060c001604052808867ffffffffffffffff16815260200187815260200186815260200185815260200184815260200183815250905080601560008967ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506020820151816001019080519060200190617beb92919061945b565b506040820151816002019080519060200190617c0892919061945b565b506060820151816003019080519060200190617c2592919061945b565b506080820151816004019080519060200190617c4292919061945b565b5060a0820151816005019080519060200190617c5f92919061945b565b50905050601481908060018154018082558091505060019003906000526020600020906006020160009091909190915060008201518160000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506020820151816001019080519060200190617cda92919061945b565b506040820151816002019080519060200190617cf792919061945b565b506060820151816003019080519060200190617d1492919061945b565b506080820151816004019080519060200190617d3192919061945b565b5060a0820151816005019080519060200190617d4e92919061945b565b50505050505050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614617e64576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f4116c50f890f20f8e526dfc5758fe8a4e630ae0b21cc5e480ab5fb1c4e05ad0b60405160405180910390a36040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401617e5b9061ad74565b60405180910390fd5b600560009054906101000a900460ff1615617eb4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401617eab9061ae34565b60405180910390fd5b8060099080519060200190617eca92919061945b565b5050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614617fd8576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f4116c50f890f20f8e526dfc5758fe8a4e630ae0b21cc5e480ab5fb1c4e05ad0b60405160405180910390a36040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401617fcf9061ad74565b60405180910390fd5b600560009054906101000a900460ff1615618028576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161801f9061ae34565b60405180910390fd5b60008551111561804a57846003908051906020019061804892919061945b565b505b60008451111561806c57836002908051906020019061806a92919061945b565b505b60008351111561808e57826004908051906020019061808c92919061945b565b505b6000825111156180b05781600690805190602001906180ae92919061945b565b505b6000815111156180d25780600a90805190602001906180d092919061945b565b505b5050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146181e3576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f4116c50f890f20f8e526dfc5758fe8a4e630ae0b21cc5e480ab5fb1c4e05ad0b60405160405180910390a36040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016181da9061ad74565b60405180910390fd5b600560009054906101000a900460ff1615618233576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161822a9061ae34565b60405180910390fd5b60001515600f60008967ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060070160009054906101000a900460ff161515146182b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016182a89061aef4565b60405180910390fd5b6182b96195a2565b6040518061010001604052808967ffffffffffffffff16815260200188815260200187815260200186815260200185815260200184815260200183815260200160011515815250905080600f60008a67ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550602082015181600101908051906020019061837592919061945b565b50604082015181600201908051906020019061839292919061945b565b5060608201518160030190805190602001906183af92919061945b565b5060808201518160040190805190602001906183cc92919061945b565b5060a08201518160050190805190602001906183e992919061945b565b5060c082015181600601908051906020019061840692919061945b565b5060e08201518160070160006101000a81548160ff021916908315150217905550905050600e81908060018154018082558091505060019003906000526020600020906008020160009091909190915060008201518160000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060208201518160010190805190602001906184a192919061945b565b5060408201518160020190805190602001906184be92919061945b565b5060608201518160030190805190602001906184db92919061945b565b5060808201518160040190805190602001906184f892919061945b565b5060a082015181600501908051906020019061851592919061945b565b5060c082015181600601908051906020019061853292919061945b565b5060e08201518160070160006101000a81548160ff02191690831515021790555050505050505050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614618669576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f4116c50f890f20f8e526dfc5758fe8a4e630ae0b21cc5e480ab5fb1c4e05ad0b60405160405180910390a36040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016186609061ad74565b60405180910390fd5b600560009054906101000a900460ff166186b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016186af9061ae54565b60405180910390fd5b600860009054906101000a900460ff1615618708576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016186ff9061ad14565b60405180910390fd5b601085604051618718919061ab92565b908152602001604051809103902060060160009054906101000a900460ff1615618777576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161876e9061ad54565b60405180910390fd5b61877f619318565b6040518060e001604052808781526020018681526020018581526020014281526020018481526020018381526020016001151581525090506001601160008282540192505081905550806010876040516187d9919061ab92565b9081526020016040518091039020600082015181600001908051906020019061880392919061945b565b50602082015181600101908051906020019061882092919061945b565b506040820151816002015560608201518160030155608082015181600401908051906020019061885192919061945b565b5060a082015181600501908051906020019061886e92919061945b565b5060c08201518160060160006101000a81548160ff021916908315150217905550905050505050505050565b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156189305780601f1061890557610100808354040283529160200191618930565b820191906000526020600020905b81548152906001019060200180831161891357829003601f168201915b505050505081565b6016818154811061894557fe5b90600052602060002090600902016000915090508060000160009054906101000a900467ffffffffffffffff1690806001018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015618a0b5780601f106189e057610100808354040283529160200191618a0b565b820191906000526020600020905b8154815290600101906020018083116189ee57829003601f168201915b505050505090806002018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015618aa95780601f10618a7e57610100808354040283529160200191618aa9565b820191906000526020600020905b815481529060010190602001808311618a8c57829003601f168201915b505050505090806003018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116","15610100020316600290048015618b475780601f10618b1c57610100808354040283529160200191618b47565b820191906000526020600020905b815481529060010190602001808311618b2a57829003601f168201915b505050505090806004018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015618be55780601f10618bba57610100808354040283529160200191618be5565b820191906000526020600020905b815481529060010190602001808311618bc857829003601f168201915b505050505090806005018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015618c835780601f10618c5857610100808354040283529160200191618c83565b820191906000526020600020905b815481529060010190602001808311618c6657829003601f168201915b505050505090806006018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015618d215780601f10618cf657610100808354040283529160200191618d21565b820191906000526020600020905b815481529060010190602001808311618d0457829003601f168201915b505050505090806007018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015618dbf5780601f10618d9457610100808354040283529160200191618dbf565b820191906000526020600020905b815481529060010190602001808311618da257829003601f168201915b505050505090806008018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015618e5d5780601f10618e3257610100808354040283529160200191618e5d565b820191906000526020600020905b815481529060010190602001808311618e4057829003601f168201915b5050505050905089565b60098054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015618efd5780601f10618ed257610100808354040283529160200191618efd565b820191906000526020600020905b815481529060010190602001808311618ee057829003601f168201915b505050505081565b60006060806060600060608060006060600080600154600260036004600560009054906101000a900460ff1660066009600754600a600860009054906101000a900460ff16601154898054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015618fe25780601f10618fb757610100808354040283529160200191618fe2565b820191906000526020600020905b815481529060010190602001808311618fc557829003601f168201915b50505050509950888054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561907e5780601f106190535761010080835404028352916020019161907e565b820191906000526020600020905b81548152906001019060200180831161906157829003601f168201915b50505050509850878054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561911a5780601f106190ef5761010080835404028352916020019161911a565b820191906000526020600020905b8154815290600101906020018083116190fd57829003601f168201915b50505050509750858054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156191b65780601f1061918b576101008083540402835291602001916191b6565b820191906000526020600020905b81548152906001019060200180831161919957829003601f168201915b50505050509550848054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156192525780601f1061922757610100808354040283529160200191619252565b820191906000526020600020905b81548152906001019060200180831161923557829003601f168201915b50505050509450828054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156192ee5780601f106192c3576101008083540402835291602001916192ee565b820191906000526020600020905b8154815290600101906020018083116192d157829003601f168201915b505050505092509a509a509a509a509a509a509a509a509a509a509a50909192939495969798999a565b6040518060e001604052806060815260200160608152602001600081526020016000815260200160608152602001606081526020016000151581525090565b604051806101400160405280600067ffffffffffffffff1681526020016060815260200160608152602001606081526020016060815260200160608152602001606081526020016060815260200160608152602001606081525090565b604051806101200160405280600067ffffffffffffffff16815260200160608152602001606081526020016060815260200160608152602001606081526020016060815260200160608152602001606081525090565b604051806101000160405280600067ffffffffffffffff1681526020016060815260200160608152602001606081526020016060815260200160608152602001606081526020016000151581525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061949c57805160ff19168380011785556194ca565b828001600101855582156194ca579182015b828111156194c95782518255916020019190600101906194ae565b5b5090506194d791906195f3565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106195145780548555619551565b8280016001018555821561955157600052602060002091601f016020900482015b82811115619550578254825591600101919060010190619535565b5b50905061955e91906195f3565b5090565b6040518060c00160405280600067ffffffffffffffff16815260200160608152602001606081526020016060815260200160608152602001606081525090565b604051806101000160405280600067ffffffffffffffff1681526020016060815260200160608152602001606081526020016060815260200160608152602001606081526020016000151581525090565b61961591905b808211156196115760008160009055506001016195f9565b5090565b90565b600082601f83011261962957600080fd5b813561963c6196378261b33f565b61b312565b9150818183526020840193506020810190508385602084028201111561966157600080fd5b60005b8381101561969157816196778882619719565b845260208401935060208301925050600181019050619664565b5050505092915050565b6000813590506196aa8161b55e565b92915050565b600082601f8301126196c157600080fd5b81356196d46196cf8261b367565b61b312565b915080825260208301602083018583830111156196f057600080fd5b6196fb83828461b50b565b50505092915050565b6000813590506197138161b575565b92915050565b6000813590506197288161b58c565b92915050565b60006020828403121561974057600080fd5b600082013567ffffffffffffffff81111561975a57600080fd5b61976684828501619618565b91505092915050565b60006020828403121561978157600080fd5b600061978f8482850161969b565b91505092915050565b6000602082840312156197aa57600080fd5b600082013567ffffffffffffffff8111156197c457600080fd5b6197d0848285016196b0565b91505092915050565b600080600080600060a086880312156197f157600080fd5b600086013567ffffffffffffffff81111561980b57600080fd5b619817888289016196b0565b955050602086013567ffffffffffffffff81111561983457600080fd5b619840888289016196b0565b945050604086013567ffffffffffffffff81111561985d57600080fd5b619869888289016196b0565b935050606086013567ffffffffffffffff81111561988657600080fd5b619892888289016196b0565b925050608086013567ffffffffffffffff8111156198af57600080fd5b6198bb888289016196b0565b9150509295509295909350565b600080600080600060a086880312156198e057600080fd5b600086013567ffffffffffffffff8111156198fa57600080fd5b619906888289016196b0565b955050602086013567ffffffffffffffff81111561992357600080fd5b61992f888289016196b0565b945050604061994088828901619704565b935050606086013567ffffffffffffffff81111561995d57600080fd5b619969888289016196b0565b925050608086013567ffffffffffffffff81111561998657600080fd5b619992888289016196b0565b9150509295509295909350565b6000602082840312156199b157600080fd5b60006199bf84828501619704565b91505092915050565b6000602082840312156199da57600080fd5b60006199e884828501619719565b91505092915050565b60008060008060008060c08789031215619a0a57600080fd5b6000619a1889828a01619719565b965050602087013567ffffffffffffffff811115619a3557600080fd5b619a4189828a016196b0565b955050604087013567ffffffffffffffff811115619a5e57600080fd5b619a6a89828a016196b0565b945050606087013567ffffffffffffffff811115619a8757600080fd5b619a9389828a016196b0565b935050608087013567ffffffffffffffff811115619ab057600080fd5b619abc89828a016196b0565b92505060a087013567ffffffffffffffff811115619ad957600080fd5b619ae589828a016196b0565b91505092955092955092","95565b600080600080600080600060e0888a031215619b0d57600080fd5b6000619b1b8a828b01619719565b975050602088013567ffffffffffffffff811115619b3857600080fd5b619b448a828b016196b0565b965050604088013567ffffffffffffffff811115619b6157600080fd5b619b6d8a828b016196b0565b955050606088013567ffffffffffffffff811115619b8a57600080fd5b619b968a828b016196b0565b945050608088013567ffffffffffffffff811115619bb357600080fd5b619bbf8a828b016196b0565b93505060a088013567ffffffffffffffff811115619bdc57600080fd5b619be88a828b016196b0565b92505060c088013567ffffffffffffffff811115619c0557600080fd5b619c118a828b016196b0565b91505092959891949750929550565b60008060008060008060008060006101208a8c031215619c3f57600080fd5b6000619c4d8c828d01619719565b99505060208a013567ffffffffffffffff811115619c6a57600080fd5b619c768c828d016196b0565b98505060408a013567ffffffffffffffff811115619c9357600080fd5b619c9f8c828d016196b0565b97505060608a013567ffffffffffffffff811115619cbc57600080fd5b619cc88c828d016196b0565b96505060808a013567ffffffffffffffff811115619ce557600080fd5b619cf18c828d016196b0565b95505060a08a013567ffffffffffffffff811115619d0e57600080fd5b619d1a8c828d016196b0565b94505060c08a013567ffffffffffffffff811115619d3757600080fd5b619d438c828d016196b0565b93505060e08a013567ffffffffffffffff811115619d6057600080fd5b619d6c8c828d016196b0565b9250506101008a013567ffffffffffffffff811115619d8a57600080fd5b619d968c828d016196b0565b9150509295985092959850929598565b6000806000806000806000806000806101408b8d031215619dc657600080fd5b6000619dd48d828e01619719565b9a505060208b013567ffffffffffffffff811115619df157600080fd5b619dfd8d828e016196b0565b99505060408b013567ffffffffffffffff811115619e1a57600080fd5b619e268d828e016196b0565b98505060608b013567ffffffffffffffff811115619e4357600080fd5b619e4f8d828e016196b0565b97505060808b013567ffffffffffffffff811115619e6c57600080fd5b619e788d828e016196b0565b96505060a08b013567ffffffffffffffff811115619e9557600080fd5b619ea18d828e016196b0565b95505060c08b013567ffffffffffffffff811115619ebe57600080fd5b619eca8d828e016196b0565b94505060e08b013567ffffffffffffffff811115619ee757600080fd5b619ef38d828e016196b0565b9350506101008b013567ffffffffffffffff811115619f1157600080fd5b619f1d8d828e016196b0565b9250506101208b013567ffffffffffffffff811115619f3b57600080fd5b619f478d828e016196b0565b9150509295989b9194979a5092959850565b6000619f65838361a725565b905092915050565b6000619f79838361a7ca565b905092915050565b6000619f8d838361a89d565b905092915050565b6000619fa1838361aa44565b905092915050565b619fb28161b4af565b82525050565b6000619fc38261b3d3565b619fcd818561b43e565b935083602082028501619fdf8561b393565b8060005b8581101561a01b5784840389528151619ffc8582619f59565b945061a0078361b40a565b925060208a01995050600181019050619fe3565b50829750879550505050505092915050565b600061a0388261b3de565b61a042818561b44f565b93508360208202850161a0548561b3a3565b8060005b8581101561a090578484038952815161a0718582619f6d565b945061a07c8361b417565b925060208a0199505060018101905061a058565b50829750879550505050505092915050565b600061a0ad8261b3e9565b61a0b7818561b460565b93508360208202850161a0c98561b3b3565b8060005b8581101561a105578484038952815161a0e68582619f81565b945061a0f18361b424565b925060208a0199505060018101905061a0cd565b50829750879550505050505092915050565b600061a1228261b3f4565b61a12c818561b471565b93508360208202850161a13e8561b3c3565b8060005b8581101561a17a578484038952815161a15b8582619f95565b945061a1668361b431565b925060208a0199505060018101905061a142565b50829750879550505050505092915050565b61a1958161b4c1565b82525050565b61a1a48161b4c1565b82525050565b600061a1b58261b3ff565b61a1bf818561b482565b935061a1cf81856020860161b51a565b61a1d88161b54d565b840191505092915050565b600061a1ee8261b3ff565b61a1f8818561b493565b935061a20881856020860161b51a565b61a2118161b54d565b840191505092915050565b600061a2278261b3ff565b61a231818561b4a4565b935061a24181856020860161b51a565b80840191505092915050565b600061a25a60188361b493565b91507f446f206e6f74207265706561742070726f63657373696e6700000000000000006000830152602082019050919050565b600061a29a60248361b493565b91507f5468652070726f6475637420746f2072656d6f766520646f6573206e6f74206560008301527f78697374000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061a300601e8361b493565b91507f466973682070726f6475637420494420616c72656164792065786973747300006000830152602082019050919050565b600061a34060218361b493565b91507f4f6e6c79206f776e65722063616e2063616c6c20746869732066756e6374696f60008301527f6e000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061a3a6601c8361b493565b91507f50726f63657373696e6720616c726561647920636f6d706c65746564000000006000830152602082019050919050565b600061a3e660198361b493565b91507f46656564696e6720494420646f6573206e6f74206578697374000000000000006000830152602082019050919050565b600061a42660198361b493565b91507f46656564696e6720494420616c726561647920657869737473000000000000006000830152602082019050919050565b600061a466601e8361b493565b91507f466973682070726f6475637420494420646f6573206e6f7420657869737400006000830152602082019050919050565b600061a4a660168361b493565b91507f62617463685f6964206964206e6f7420657869737473000000000000000000006000830152602082019050919050565b600061a4e660198361b493565b91507f506f6e64206669736820686173206265656e20636175676874000000000000006000830152602082019050919050565b600061a52660178361b493565b91507f4e6f2063617463682c206e6f2070726f63657373696e670000000000000000006000830152602082019050919050565b600061a566601f8361b493565b91507f466973682070726f6475637420636f756e74206f7574206f662072616e6765006000830152602082019050919050565b600061a5a6601e8361b493565b91507f416972207175616c69747920494420616c7265616479206578697374732e00006000830152602082019050919050565b600061a5e6601f8361b493565b91507f5175616c697479206d757374206265206265747765656e203020616e642032006000830152602082019050919050565b600061a62660278361b493565b91507f556e70726f63657373656420666973682070726f647563747320636f756e742060008301527f6973207a65726f000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061a68c601b8361b493565b91507f4e6172636f7469637320494420616c72656164792065786973747300000000006000830152602082019050919050565b600061a6cc60238361b493565b91507f546865206d6f6469666965642070726f6475637420646f6573206e6f7420657860008301527f69737400000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600060c08301600083015161a73d600086018261ab74565b506020830151848203602086015261a755828261a1aa565b9150506040830151848203604086015261a76f828261a1aa565b9150506060830151848203606086015261a789828261a1aa565b9150506080830151848203608086015261a7a3828261a1aa565b91505060a083015184820360a086015261a7bd828261a1aa565b9150508091505092915050565b60006101008301600083015161a7e3600086018261ab74565b506020830151848203602086015261a7fb828261a1aa565b9150506040830151848203604086015261a815828261a1aa565b9150506060830151848203606086015261a82f828261a1aa565b9150506080830151848203608086015261a849828261a1aa565b91505060a083015184820360a086015261a863828261a1aa565b91505060c083015184820360c086015261a87d828261a1aa565b91505060e083015161a89260e086018261a18c565b508091505092915050565b60006101208301600083015161a8b6600086018261ab74565b506020830151848203602086015261a8ce828261a1aa565b9150506040830151848203604086015261a8e8828261a1aa565b9150506060830151848203606086015261a902828261a1aa565b9150506080830151848203608086015261a91c828261a1aa565b91505060a083015184820360a086015261a936828261a1aa565b91505060c083015184820360c086015261a950828261a1aa565b91505060e083015184820360e086015261a96a828261a1aa565b91505061010083015184820361010086015261a986828261a1aa565b9150508091505092915050565b600060e083016000830151848203600086015261a9b0828261a1aa565b9150506020830151848203602086015261a9ca828261a1aa565b915050604083015161a9df604086018261ab56565b50606083015161a9f2606086018261ab56565b506080830151848203608086015261aa0a828261a1aa565b91505060a083015184820360a086015261aa24828261a1aa565b91505060c083015161aa3960c086018261a18c565b508091505092915050565b60006101408301600083015161aa5d600086018261ab74565b506020830151848203602086015261aa75828261a1aa565b9150506040830151848203604086015261aa8f828261a1aa565b9150506060830151848203606086015261aaa9828261a1aa565b9150506080830151848203608086015261aac3828261a1aa565b91505060a083015184820360a086015261aadd828261a1aa565b91505060c083015184820360c086015261aa","f7828261a1aa565b91505060e083015184820360e086015261ab11828261a1aa565b91505061010083015184820361010086015261ab2d828261a1aa565b91505061012083015184820361012086015261ab49828261a1aa565b9150508091505092915050565b61ab5f8161b4ed565b82525050565b61ab6e8161b4ed565b82525050565b61ab7d8161b4f7565b82525050565b61ab8c8161b4f7565b82525050565b600061ab9e828461a21c565b915081905092915050565b600060208201905061abbe6000830184619fa9565b92915050565b6000602082019050818103600083015261abde8184619fb8565b905092915050565b6000602082019050818103600083015261ac00818461a02d565b905092915050565b6000602082019050818103600083015261ac22818461a0a2565b905092915050565b6000602082019050818103600083015261ac44818461a117565b905092915050565b600060208201905061ac61600083018461a19b565b92915050565b6000602082019050818103600083015261ac81818461a1e3565b905092915050565b600060e082019050818103600083015261aca3818a61a1e3565b9050818103602083015261acb7818961a1e3565b905061acc6604083018861ab65565b61acd3606083018761ab65565b818103608083015261ace5818661a1e3565b905081810360a083015261acf9818561a1e3565b905061ad0860c083018461a19b565b98975050505050505050565b6000602082019050818103600083015261ad2d8161a24d565b9050919050565b6000602082019050818103600083015261ad4d8161a28d565b9050919050565b6000602082019050818103600083015261ad6d8161a2f3565b9050919050565b6000602082019050818103600083015261ad8d8161a333565b9050919050565b6000602082019050818103600083015261adad8161a399565b9050919050565b6000602082019050818103600083015261adcd8161a3d9565b9050919050565b6000602082019050818103600083015261aded8161a419565b9050919050565b6000602082019050818103600083015261ae0d8161a459565b9050919050565b6000602082019050818103600083015261ae2d8161a499565b9050919050565b6000602082019050818103600083015261ae4d8161a4d9565b9050919050565b6000602082019050818103600083015261ae6d8161a519565b9050919050565b6000602082019050818103600083015261ae8d8161a559565b9050919050565b6000602082019050818103600083015261aead8161a599565b9050919050565b6000602082019050818103600083015261aecd8161a5d9565b9050919050565b6000602082019050818103600083015261aeed8161a619565b9050919050565b6000602082019050818103600083015261af0d8161a67f565b9050919050565b6000602082019050818103600083015261af2d8161a6bf565b9050919050565b6000602082019050818103600083015261af4e818461a993565b905092915050565b600060208201905061af6b600083018461ab65565b92915050565b60006101608201905061af87600083018e61ab65565b818103602083015261af99818d61a1e3565b9050818103604083015261afad818c61a1e3565b9050818103606083015261afc1818b61a1e3565b905061afd0608083018a61a19b565b81810360a083015261afe2818961a1e3565b905081810360c083015261aff6818861a1e3565b905061b00560e083018761ab65565b81810361010083015261b018818661a1e3565b905061b02861012083018561a19b565b61b03661014083018461ab65565b9c9b505050505050505050505050565b600060c08201905061b05b600083018961ab83565b818103602083015261b06d818861a1e3565b9050818103604083015261b081818761a1e3565b9050818103606083015261b095818661a1e3565b9050818103608083015261b0a9818561a1e3565b905081810360a083015261b0bd818461a1e3565b9050979650505050505050565b60006101008201905061b0e0600083018b61ab83565b818103602083015261b0f2818a61a1e3565b9050818103604083015261b106818961a1e3565b9050818103606083015261b11a818861a1e3565b9050818103608083015261b12e818761a1e3565b905081810360a083015261b142818661a1e3565b905081810360c083015261b156818561a1e3565b905061b16560e083018461a19b565b9998505050505050505050565b60006101208201905061b188600083018c61ab83565b818103602083015261b19a818b61a1e3565b9050818103604083015261b1ae818a61a1e3565b9050818103606083015261b1c2818961a1e3565b9050818103608083015261b1d6818861a1e3565b905081810360a083015261b1ea818761a1e3565b905081810360c083015261b1fe818661a1e3565b905081810360e083015261b212818561a1e3565b905081810361010083015261b227818461a1e3565b90509a9950505050505050505050565b60006101408201905061b24d600083018d61ab83565b818103602083015261b25f818c61a1e3565b9050818103604083015261b273818b61a1e3565b9050818103606083015261b287818a61a1e3565b9050818103608083015261b29b818961a1e3565b905081810360a083015261b2af818861a1e3565b905081810360c083015261b2c3818761a1e3565b905081810360e083015261b2d7818661a1e3565b905081810361010083015261b2ec818561a1e3565b905081810361012083015261b301818461a1e3565b90509b9a5050505050505050505050565b6000604051905081810181811067ffffffffffffffff8211171561b33557600080fd5b8060405250919050565b600067ffffffffffffffff82111561b35657600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561b37e57600080fd5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600061b4ba8261b4cd565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600067ffffffffffffffff82169050919050565b82818337600083830152505050565b60005b8381101561b53857808201518184015260208101905061b51d565b8381111561b547576000848401525b50505050565b6000601f19601f8301169050919050565b61b5678161b4c1565b811461b57257600080fd5b50565b61b57e8161b4ed565b811461b58957600080fd5b50565b61b5958161b4f7565b811461b5a057600080fd5b5056fea26469706673582212204e50e98e485c702eb92a6dcc451b9b6b956205e7f8e0839d5ffded4ff22751a064736f6c634300060a0033"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"methodSignatureAsString\":\"(address,uint256,string,string,string,string,string,string,string)\",\"name\":null,\"type\":\"constructor\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\",\"internalType\":\"address\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"address\"},{\"name\":\"_traceabId\",\"type\":\"uint256\",\"internalType\":\"uint256\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"_pondName\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_fishVarieties\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_breedingBatchName\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_releaseDate\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_ofFishFarm\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_notes\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_cropArea\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"}],\"outputs\":[]},{\"methodSignatureAsString\":\"UnauthorizedAccess(address,address)\",\"name\":\"UnauthorizedAccess\",\"type\":\"event\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":null,\"inputs\":[{\"name\":\"caller\",\"type\":\"address\",\"internalType\":\"address\",\"indexed\":true,\"components\":[],\"dynamic\":false,\"typeAsString\":\"address\"},{\"name\":\"contractOwner\",\"type\":\"address\",\"internalType\":\"address\",\"indexed\":true,\"components\":[],\"dynamic\":false,\"typeAsString\":\"address\"}],\"outputs\":[]},{\"methodSignatureAsString\":\"addAirQualityValue(uint64,string,string,string,string,string)\",\"name\":\"addAirQualityValue\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"_id\",\"type\":\"uint64\",\"internalType\":\"uint64\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint64\"},{\"name\":\"_airQuality\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_temperature\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_humidity\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_pressure\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_qualityDate\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"}],\"outputs\":[]},{\"methodSignatureAsString\":\"addFeeding(uint64,string,string,string,string,string,string)\",\"name\":\"addFeeding\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"_id\",\"type\":\"uint64\",\"internalType\":\"uint64\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint64\"},{\"name\":\"_feedName\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_quantityUsed\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_unit\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_startDate\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_endDate\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_notes\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"}],\"outputs\":[]},{\"methodSignatureAsString\":\"addFishProduct(string,string,uint256,string,string)\",\"name\":\"addFishProduct\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"_id\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_productName\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_quality\",\"type\":\"uint256\",\"internalType\":\"uint256\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"_weight\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_notes\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"}],\"outputs\":[]},{\"methodSignatureAsString\":\"addNarcoticsValue(uint64,string,string,string,string,string,string)\",\"name\":\"addNarcoticsValue\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"_id\",\"type\":\"uint64\",\"internalType\":\"uint64\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint64\"},{\"name\":\"_drugName\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_quantityUsed\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_unit\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_startDate\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_endDate\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_notes\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"}],\"outputs\":[]},{\"methodSignatureAsString\":\"addWaterQualityValue(uint64,string,string,string,string,string,string,string,string,string)\",\"name\":\"addWaterQualityValue\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"_id\",\"type\":\"uint64\",\"internalType\":\"uint64\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint64\"},{\"name\":\"_deviceId\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_date\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_temperature\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_dissolvedOxygen\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_phValue\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_ammoniaNitrogen\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_nitriteContent\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_oxygenContent\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_hardness\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"}],\"outputs\":[]},{\"methodSignatureAsString\":\"addfishBatchTask(uint64,string,string,string,string,string,string,string,string)\",\"name\":\"addfishBatchTask\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"_batch_id\",\"type\":\"uint64\",\"internalType\":\"uint64\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint64\"},{\"name\":\"_task_head\",\"type\":\"strin","g\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_task_name\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_plan_start\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_plan_finish\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_actual_start\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_actual_finish\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_task_detail\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_status\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"}],\"outputs\":[]},{\"methodSignatureAsString\":\"airQualityValueMapping(uint64)\",\"name\":\"airQualityValueMapping\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[{\"name\":\"\",\"type\":\"uint64\",\"internalType\":\"uint64\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint64\"}],\"outputs\":[{\"name\":\"id\",\"type\":\"uint64\",\"internalType\":\"uint64\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint64\"},{\"name\":\"airQuality\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"temperature\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"humidity\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"pressure\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"qualityDate\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"}]},{\"methodSignatureAsString\":\"airQualityValues(uint256)\",\"name\":\"airQualityValues\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}],\"outputs\":[{\"name\":\"id\",\"type\":\"uint64\",\"internalType\":\"uint64\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint64\"},{\"name\":\"airQuality\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"temperature\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"humidity\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"pressure\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"qualityDate\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"}]},{\"methodSignatureAsString\":\"breedingBatchName()\",\"name\":\"breedingBatchName\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"}]},{\"methodSignatureAsString\":\"catchTimestamp()\",\"name\":\"catchTimestamp\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}]},{\"methodSignatureAsString\":\"checkFishProduct(string)\",\"name\":\"checkFishProduct\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[{\"name\":\"_id\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"bool\"}]},{\"methodSignatureAsString\":\"completeProcessing()\",\"name\":\"completeProcessing\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[],\"outputs\":[]},{\"methodSignatureAsString\":\"cropArea()\",\"name\":\"cropArea\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"}]},{\"methodSignatureAsString\":\"feedingMapping(uint64)\",\"name\":\"feedingMapping\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[{\"name\":\"\",\"type\":\"uint64\",\"internalType\":\"uint64\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint64\"}],\"outputs\":[{\"name\":\"id\",\"type\":\"uint64\",\"internalType\":\"uint64\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint64\"},{\"name\":\"feedName\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"quantityUsed\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"unit\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"startDate\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"endDate\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"notes\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"exist\",\"type\":\"bool\",\"internalType\":\"bool\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"bool\"}]},{\"methodSignatureAsString\":\"feedings(uint256)\",\"name\":\"feedings\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}],\"outputs\":[{\"name\":\"id\",\"type\":\"uint64\",\"internalType\":\"uint64\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint64\"},{\"name\":\"feedName\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"quantityUsed\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"unit\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"startDate\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"endDate\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"notes\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"exist\",\"type\":\"bool\",\"internalType\":\"bool\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"bool\"}]},{\"methodSignatureAsString\":\"fishBatchTaskMapper(uint64)\",\"name\":\"fishBatchTaskMapper\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[{\"name\":\"\",\"type\":\"uint64\",\"internalType\":\"uint64\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint64\"}],\"outputs\":[{\"name\":\"batch_id\",\"type\":\"uint64\",\"internalType\":\"uint64\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint64\"},{\"name\":\"task_head\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"task_name\",\"type\":\"string\",\"internalTy","pe\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"plan_start\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"plan_finish\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"actual_start\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"actual_finish\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"task_detail\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"status\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"}]},{\"methodSignatureAsString\":\"fishBatchTasks(uint256)\",\"name\":\"fishBatchTasks\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}],\"outputs\":[{\"name\":\"batch_id\",\"type\":\"uint64\",\"internalType\":\"uint64\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint64\"},{\"name\":\"task_head\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"task_name\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"plan_start\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"plan_finish\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"actual_start\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"actual_finish\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"task_detail\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"status\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"}]},{\"methodSignatureAsString\":\"fishProductCount()\",\"name\":\"fishProductCount\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}]},{\"methodSignatureAsString\":\"fishProductMapping(string)\",\"name\":\"fishProductMapping\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"}],\"outputs\":[{\"name\":\"id\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"productName\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"quality\",\"type\":\"uint256\",\"internalType\":\"uint256\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"processingTimestamp\",\"type\":\"uint256\",\"internalType\":\"uint256\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"weight\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"notes\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"exist\",\"type\":\"bool\",\"internalType\":\"bool\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"bool\"}]},{\"methodSignatureAsString\":\"fishVarieties()\",\"name\":\"fishVarieties\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"}]},{\"methodSignatureAsString\":\"getAirQualityValues()\",\"name\":\"getAirQualityValues\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"tuple[]\",\"internalType\":\"struct FishPondTraceabData.AirQualityValue[]\",\"indexed\":false,\"components\":[{\"name\":\"id\",\"type\":\"uint64\",\"internalType\":\"uint64\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint64\"},{\"name\":\"airQuality\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"temperature\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"humidity\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"pressure\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"qualityDate\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"}],\"dynamic\":true,\"typeAsString\":\"(uint64,string,string,string,string,string)[]\"}]},{\"methodSignatureAsString\":\"getFeeding(uint64[])\",\"name\":\"getFeeding\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[{\"name\":\"_ids\",\"type\":\"uint64[]\",\"internalType\":\"uint64[]\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"uint64[]\"}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple[]\",\"internalType\":\"struct FishPondTraceabData.Feeding[]\",\"indexed\":false,\"components\":[{\"name\":\"id\",\"type\":\"uint64\",\"internalType\":\"uint64\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint64\"},{\"name\":\"feedName\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"quantityUsed\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"unit\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"startDate\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"endDate\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"notes\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"exist\",\"type\":\"bool\",\"internalType\":\"bool\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"bool\"}],\"dynamic\":true,\"typeAsString\":\"(uint64,string,string,string,string,string,string,bool)[]\"}]},{\"methodSignatureAsString\":\"getFeedings()\",\"name\":\"getFeedings\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"tuple[]\",\"internalType\":\"struct FishPondTraceabData.Feeding[]\",\"indexed\":false,\"components\":[{\"name\":\"id\",\"type\":\"uint64\",\"internalType\":\"uint64\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint64\"},{\"name\":\"feedName\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"quantityUsed\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"unit\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"startDate\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"endDate\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"notes\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":t","rue,\"typeAsString\":\"string\"},{\"name\":\"exist\",\"type\":\"bool\",\"internalType\":\"bool\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"bool\"}],\"dynamic\":true,\"typeAsString\":\"(uint64,string,string,string,string,string,string,bool)[]\"}]},{\"methodSignatureAsString\":\"getFishProduct(string)\",\"name\":\"getFishProduct\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[{\"name\":\"_id\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"internalType\":\"struct FishPondTraceabData.FishProduct\",\"indexed\":false,\"components\":[{\"name\":\"id\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"productName\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"quality\",\"type\":\"uint256\",\"internalType\":\"uint256\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"processingTimestamp\",\"type\":\"uint256\",\"internalType\":\"uint256\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"weight\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"notes\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"exist\",\"type\":\"bool\",\"internalType\":\"bool\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"bool\"}],\"dynamic\":true,\"typeAsString\":\"(string,string,uint256,uint256,string,string,bool)\"}]},{\"methodSignatureAsString\":\"getOfFishFarm()\",\"name\":\"getOfFishFarm\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"}]},{\"methodSignatureAsString\":\"getOwner()\",\"name\":\"getOwner\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"address\"}]},{\"methodSignatureAsString\":\"getPond()\",\"name\":\"getPond\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[],\"outputs\":[{\"name\":\"_id\",\"type\":\"uint256\",\"internalType\":\"uint256\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"_fishVarieties\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_pondName\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_breedingBatchName\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_isCaught\",\"type\":\"bool\",\"internalType\":\"bool\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"bool\"},{\"name\":\"_releaseDate\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_ofFishFarm\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_catchTimestamp\",\"type\":\"uint256\",\"internalType\":\"uint256\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"_notes\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_isProcessed\",\"type\":\"bool\",\"internalType\":\"bool\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"bool\"},{\"name\":\"_fishProductCount\",\"type\":\"uint256\",\"internalType\":\"uint256\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}]},{\"methodSignatureAsString\":\"getWaterQualityValue(uint64[])\",\"name\":\"getWaterQualityValue\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[{\"name\":\"_ids\",\"type\":\"uint64[]\",\"internalType\":\"uint64[]\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"uint64[]\"}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple[]\",\"internalType\":\"struct FishPondTraceabData.WaterQualityValue[]\",\"indexed\":false,\"components\":[{\"name\":\"id\",\"type\":\"uint64\",\"internalType\":\"uint64\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint64\"},{\"name\":\"deviceId\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"date\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"temperature\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"dissolvedOxygen\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"phValue\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"ammoniaNitrogen\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"nitriteContent\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"oxygenContent\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"hardness\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"}],\"dynamic\":true,\"typeAsString\":\"(uint64,string,string,string,string,string,string,string,string,string)[]\"}]},{\"methodSignatureAsString\":\"getWaterQualityValues()\",\"name\":\"getWaterQualityValues\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"tuple[]\",\"internalType\":\"struct FishPondTraceabData.WaterQualityValue[]\",\"indexed\":false,\"components\":[{\"name\":\"id\",\"type\":\"uint64\",\"internalType\":\"uint64\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint64\"},{\"name\":\"deviceId\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"date\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"temperature\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"dissolvedOxygen\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"phValue\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"ammoniaNitrogen\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"nitriteContent\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"oxygenContent\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"hardness\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"}],\"dynamic\":true,\"typeAsString\":\"(uint64,string,string,string,string,string,string,string,string,string)[]\"}]},{\"methodSignatureAsString\":\"getfishBatchTask(uint64[])\",\"name\":\"getfishBatchTask\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[{\"name\":\"_batch_ids\",\"type\":\"uint64[]\",\"internalType\":\"uint64[]\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"uint64[]\"}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple[]\",\"internalType\":\"struct FishPondTraceabData.FishBatchTask[]\",\"indexed\":false,\"components\":[{\"name\":\"batch_id\",\"type\":\"uint64\",\"internalType\":\"uint64\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint64\"},","{\"name\":\"task_head\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"task_name\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"plan_start\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"plan_finish\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"actual_start\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"actual_finish\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"task_detail\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"status\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"}],\"dynamic\":true,\"typeAsString\":\"(uint64,string,string,string,string,string,string,string,string)[]\"}]},{\"methodSignatureAsString\":\"id()\",\"name\":\"id\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}]},{\"methodSignatureAsString\":\"isCaught()\",\"name\":\"isCaught\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"bool\"}]},{\"methodSignatureAsString\":\"isProcessed()\",\"name\":\"isProcessed\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"bool\"}]},{\"methodSignatureAsString\":\"modifyFeeding(uint64,string,string,string,string,string,string)\",\"name\":\"modifyFeeding\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"_id\",\"type\":\"uint64\",\"internalType\":\"uint64\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint64\"},{\"name\":\"_feedName\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_quantityUsed\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_unit\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_startDate\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_endDate\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_notes\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"}],\"outputs\":[]},{\"methodSignatureAsString\":\"modifyFishProduct(string,string,uint256,string,string)\",\"name\":\"modifyFishProduct\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"_id\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_productName\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_quality\",\"type\":\"uint256\",\"internalType\":\"uint256\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"},{\"name\":\"_weight\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_notes\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"}],\"outputs\":[]},{\"methodSignatureAsString\":\"modifyIsCaught(bool)\",\"name\":\"modifyIsCaught\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"_isCaught\",\"type\":\"bool\",\"internalType\":\"bool\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"bool\"}],\"outputs\":[]},{\"methodSignatureAsString\":\"modifyOfFishFarm(string)\",\"name\":\"modifyOfFishFarm\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"_newOfFishFarm\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"}],\"outputs\":[]},{\"methodSignatureAsString\":\"modifyPondInfo(string,string,string,string,string)\",\"name\":\"modifyPondInfo\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"_pondName\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_fishVarieties\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_breedingBatchName\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_releaseDate\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_notes\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"}],\"outputs\":[]},{\"methodSignatureAsString\":\"narcotics(uint256)\",\"name\":\"narcotics\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}],\"outputs\":[{\"name\":\"id\",\"type\":\"uint64\",\"internalType\":\"uint64\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint64\"},{\"name\":\"drugName\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"quantityUsed\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"unit\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"startDate\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"endDate\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"notes\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"exist\",\"type\":\"bool\",\"internalType\":\"bool\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"bool\"}]},{\"methodSignatureAsString\":\"narcoticsMapping(uint64)\",\"name\":\"narcoticsMapping\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[{\"name\":\"\",\"type\":\"uint64\",\"internalType\":\"uint64\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint64\"}],\"outputs\":[{\"name\":\"id\",\"type\":\"uint64\",\"internalType\":\"uint64\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint64\"},{\"name\":\"drugName\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"quantityUsed\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"unit\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"startDate\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"endDate\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"notes\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"comp","onents\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"exist\",\"type\":\"bool\",\"internalType\":\"bool\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"bool\"}]},{\"methodSignatureAsString\":\"notes()\",\"name\":\"notes\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"}]},{\"methodSignatureAsString\":\"ofFishFarm()\",\"name\":\"ofFishFarm\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"}]},{\"methodSignatureAsString\":\"owner()\",\"name\":\"owner\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"address\"}]},{\"methodSignatureAsString\":\"pondName()\",\"name\":\"pondName\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"}]},{\"methodSignatureAsString\":\"releaseDate()\",\"name\":\"releaseDate\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"}]},{\"methodSignatureAsString\":\"removeFishProduct(string)\",\"name\":\"removeFishProduct\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"_id\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"}],\"outputs\":[]},{\"methodSignatureAsString\":\"updatefishBatchTask(uint64,string,string,string,string,string,string,string,string)\",\"name\":\"updatefishBatchTask\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"_batch_id\",\"type\":\"uint64\",\"internalType\":\"uint64\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint64\"},{\"name\":\"_task_head\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_task_name\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_plan_start\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_plan_finish\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_actual_start\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_actual_finish\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_task_detail\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"_status\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"}],\"outputs\":[]},{\"methodSignatureAsString\":\"waterQualityValueMapping(uint64)\",\"name\":\"waterQualityValueMapping\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[{\"name\":\"\",\"type\":\"uint64\",\"internalType\":\"uint64\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint64\"}],\"outputs\":[{\"name\":\"id\",\"type\":\"uint64\",\"internalType\":\"uint64\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint64\"},{\"name\":\"deviceId\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"date\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"temperature\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"dissolvedOxygen\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"phValue\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"ammoniaNitrogen\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"nitriteContent\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"oxygenContent\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"hardness\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"}]},{\"methodSignatureAsString\":\"waterQualityValues(uint256)\",\"name\":\"waterQualityValues\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint256\"}],\"outputs\":[{\"name\":\"id\",\"type\":\"uint64\",\"internalType\":\"uint64\",\"indexed\":false,\"components\":[],\"dynamic\":false,\"typeAsString\":\"uint64\"},{\"name\":\"deviceId\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"date\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"temperature\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"dissolvedOxygen\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"phValue\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"ammoniaNitrogen\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"nitriteContent\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"oxygenContent\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"},{\"name\":\"hardness\",\"type\":\"string\",\"internalType\":\"string\",\"indexed\":false,\"components\":[],\"dynamic\":true,\"typeAsString\":\"string\"}]}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_ADDAIRQUALITYVALUE = "addAirQualityValue";

    public static final String FUNC_ADDFEEDING = "addFeeding";

    public static final String FUNC_ADDFISHPRODUCT = "addFishProduct";

    public static final String FUNC_ADDNARCOTICSVALUE = "addNarcoticsValue";

    public static final String FUNC_ADDWATERQUALITYVALUE = "addWaterQualityValue";

    public static final String FUNC_ADDFISHBATCHTASK = "addfishBatchTask";

    public static final String FUNC_AIRQUALITYVALUEMAPPING = "airQualityValueMapping";

    public static final String FUNC_AIRQUALITYVALUES = "airQualityValues";

    public static final String FUNC_BREEDINGBATCHNAME = "breedingBatchName";

    public static final String FUNC_CATCHTIMESTAMP = "catchTimestamp";

    public static final String FUNC_CHECKFISHPRODUCT = "checkFishProduct";

    public static final String FUNC_COMPLETEPROCESSING = "completeProcessing";

    public static final String FUNC_CROPAREA = "cropArea";

    public static final String FUNC_FEEDINGMAPPING = "feedingMapping";

    public static final String FUNC_FEEDINGS = "feedings";

    public static final String FUNC_FISHBATCHTASKMAPPER = "fishBatchTaskMapper";

    public static final String FUNC_FISHBATCHTASKS = "fishBatchTasks";

    public static final String FUNC_FISHPRODUCTCOUNT = "fishProductCount";

    public static final String FUNC_FISHPRODUCTMAPPING = "fishProductMapping";

    public static final String FUNC_FISHVARIETIES = "fishVarieties";

    public static final String FUNC_GETAIRQUALITYVALUES = "getAirQualityValues";

    public static final String FUNC_GETFEEDING = "getFeeding";

    public static final String FUNC_GETFEEDINGS = "getFeedings";

    public static final String FUNC_GETFISHPRODUCT = "getFishProduct";

    public static final String FUNC_GETOFFISHFARM = "getOfFishFarm";

    public static final String FUNC_GETOWNER = "getOwner";

    public static final String FUNC_GETPOND = "getPond";

    public static final String FUNC_GETWATERQUALITYVALUE = "getWaterQualityValue";

    public static final String FUNC_GETWATERQUALITYVALUES = "getWaterQualityValues";

    public static final String FUNC_GETFISHBATCHTASK = "getfishBatchTask";

    public static final String FUNC_ID = "id";

    public static final String FUNC_ISCAUGHT = "isCaught";

    public static final String FUNC_ISPROCESSED = "isProcessed";

    public static final String FUNC_MODIFYFEEDING = "modifyFeeding";

    public static final String FUNC_MODIFYFISHPRODUCT = "modifyFishProduct";

    public static final String FUNC_MODIFYISCAUGHT = "modifyIsCaught";

    public static final String FUNC_MODIFYOFFISHFARM = "modifyOfFishFarm";

    public static final String FUNC_MODIFYPONDINFO = "modifyPondInfo";

    public static final String FUNC_NARCOTICS = "narcotics";

    public static final String FUNC_NARCOTICSMAPPING = "narcoticsMapping";

    public static final String FUNC_NOTES = "notes";

    public static final String FUNC_OFFISHFARM = "ofFishFarm";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_PONDNAME = "pondName";

    public static final String FUNC_RELEASEDATE = "releaseDate";

    public static final String FUNC_REMOVEFISHPRODUCT = "removeFishProduct";

    public static final String FUNC_UPDATEFISHBATCHTASK = "updatefishBatchTask";

    public static final String FUNC_WATERQUALITYVALUEMAPPING = "waterQualityValueMapping";

    public static final String FUNC_WATERQUALITYVALUES = "waterQualityValues";

    public static final Event UNAUTHORIZEDACCESS_EVENT = new Event("UnauthorizedAccess",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    protected FishPondTraceabData(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public List<UnauthorizedAccessEventResponse> getUnauthorizedAccessEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(UNAUTHORIZEDACCESS_EVENT, transactionReceipt);
        ArrayList<UnauthorizedAccessEventResponse> responses = new ArrayList<UnauthorizedAccessEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UnauthorizedAccessEventResponse typedResponse = new UnauthorizedAccessEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.caller = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.contractOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeUnauthorizedAccessEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(UNAUTHORIZEDACCESS_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeUnauthorizedAccessEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(UNAUTHORIZEDACCESS_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public TransactionReceipt addAirQualityValue(BigInteger _id, String _airQuality, String _temperature, String _humidity, String _pressure, String _qualityDate) {
        final Function function = new Function(
                FUNC_ADDAIRQUALITYVALUE,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint64(_id),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_airQuality),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_temperature),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_humidity),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_pressure),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_qualityDate)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] addAirQualityValue(BigInteger _id, String _airQuality, String _temperature, String _humidity, String _pressure, String _qualityDate, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDAIRQUALITYVALUE,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint64(_id),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_airQuality),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_temperature),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_humidity),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_pressure),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_qualityDate)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddAirQualityValue(BigInteger _id, String _airQuality, String _temperature, String _humidity, String _pressure, String _qualityDate) {
        final Function function = new Function(
                FUNC_ADDAIRQUALITYVALUE,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint64(_id),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_airQuality),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_temperature),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_humidity),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_pressure),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_qualityDate)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple6<BigInteger, String, String, String, String, String> getAddAirQualityValueInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDAIRQUALITYVALUE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple6<BigInteger, String, String, String, String, String>(

                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (String) results.get(3).getValue(),
                (String) results.get(4).getValue(),
                (String) results.get(5).getValue()
        );
    }

    public TransactionReceipt addFeeding(BigInteger _id, String _feedName, String _quantityUsed, String _unit, String _startDate, String _endDate, String _notes) {
        final Function function = new Function(
                FUNC_ADDFEEDING,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint64(_id),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_feedName),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_quantityUsed),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_unit),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_startDate),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_endDate),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_notes)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] addFeeding(BigInteger _id, String _feedName, String _quantityUsed, String _unit, String _startDate, String _endDate, String _notes, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDFEEDING,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint64(_id),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_feedName),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_quantityUsed),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_unit),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_startDate),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_endDate),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_notes)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddFeeding(BigInteger _id, String _feedName, String _quantityUsed, String _unit, String _startDate, String _endDate, String _notes) {
        final Function function = new Function(
                FUNC_ADDFEEDING,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint64(_id),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_feedName),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_quantityUsed),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_unit),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_startDate),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_endDate),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_notes)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple7<BigInteger, String, String, String, String, String, String> getAddFeedingInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDFEEDING,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple7<BigInteger, String, String, String, String, String, String>(

                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (String) results.get(3).getValue(),
                (String) results.get(4).getValue(),
                (String) results.get(5).getValue(),
                (String) results.get(6).getValue()
        );
    }

    public TransactionReceipt addFishProduct(String _id, String _productName, BigInteger _quality, String _weight, String _notes) {
        final Function function = new Function(
                FUNC_ADDFISHPRODUCT,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_id),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_productName),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_quality),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_weight),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_notes)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] addFishProduct(String _id, String _productName, BigInteger _quality, String _weight, String _notes, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDFISHPRODUCT,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_id),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_productName),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_quality),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_weight),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_notes)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddFishProduct(String _id, String _productName, BigInteger _quality, String _weight, String _notes) {
        final Function function = new Function(
                FUNC_ADDFISHPRODUCT,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_id),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_productName),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_quality),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_weight),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_notes)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple5<String, String, BigInteger, String, String> getAddFishProductInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDFISHPRODUCT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<String, String, BigInteger, String, String>(

                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue(),
                (String) results.get(3).getValue(),
                (String) results.get(4).getValue()
        );
    }

    public TransactionReceipt addNarcoticsValue(BigInteger _id, String _drugName, String _quantityUsed, String _unit, String _startDate, String _endDate, String _notes) {
        final Function function = new Function(
                FUNC_ADDNARCOTICSVALUE,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint64(_id),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_drugName),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_quantityUsed),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_unit),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_startDate),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_endDate),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_notes)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] addNarcoticsValue(BigInteger _id, String _drugName, String _quantityUsed, String _unit, String _startDate, String _endDate, String _notes, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDNARCOTICSVALUE,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint64(_id),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_drugName),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_quantityUsed),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_unit),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_startDate),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_endDate),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_notes)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddNarcoticsValue(BigInteger _id, String _drugName, String _quantityUsed, String _unit, String _startDate, String _endDate, String _notes) {
        final Function function = new Function(
                FUNC_ADDNARCOTICSVALUE,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint64(_id),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_drugName),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_quantityUsed),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_unit),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_startDate),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_endDate),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_notes)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple7<BigInteger, String, String, String, String, String, String> getAddNarcoticsValueInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDNARCOTICSVALUE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple7<BigInteger, String, String, String, String, String, String>(

                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (String) results.get(3).getValue(),
                (String) results.get(4).getValue(),
                (String) results.get(5).getValue(),
                (String) results.get(6).getValue()
        );
    }

    public TransactionReceipt addWaterQualityValue(BigInteger _id, String _deviceId, String _date, String _temperature, String _dissolvedOxygen, String _phValue, String _ammoniaNitrogen, String _nitriteContent, String _oxygenContent, String _hardness) {
        final Function function = new Function(
                FUNC_ADDWATERQUALITYVALUE,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint64(_id),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_deviceId),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_date),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_temperature),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_dissolvedOxygen),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_phValue),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_ammoniaNitrogen),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_nitriteContent),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_oxygenContent),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_hardness)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] addWaterQualityValue(BigInteger _id, String _deviceId, String _date, String _temperature, String _dissolvedOxygen, String _phValue, String _ammoniaNitrogen, String _nitriteContent, String _oxygenContent, String _hardness, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDWATERQUALITYVALUE,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint64(_id),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_deviceId),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_date),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_temperature),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_dissolvedOxygen),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_phValue),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_ammoniaNitrogen),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_nitriteContent),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_oxygenContent),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_hardness)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddWaterQualityValue(BigInteger _id, String _deviceId, String _date, String _temperature, String _dissolvedOxygen, String _phValue, String _ammoniaNitrogen, String _nitriteContent, String _oxygenContent, String _hardness) {
        final Function function = new Function(
                FUNC_ADDWATERQUALITYVALUE,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint64(_id),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_deviceId),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_date),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_temperature),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_dissolvedOxygen),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_phValue),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_ammoniaNitrogen),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_nitriteContent),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_oxygenContent),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_hardness)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple10<BigInteger, String, String, String, String, String, String, String, String, String> getAddWaterQualityValueInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDWATERQUALITYVALUE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple10<BigInteger, String, String, String, String, String, String, String, String, String>(

                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (String) results.get(3).getValue(),
                (String) results.get(4).getValue(),
                (String) results.get(5).getValue(),
                (String) results.get(6).getValue(),
                (String) results.get(7).getValue(),
                (String) results.get(8).getValue(),
                (String) results.get(9).getValue()
        );
    }

    public TransactionReceipt addfishBatchTask(BigInteger _batch_id, String _task_head, String _task_name, String _plan_start, String _plan_finish, String _actual_start, String _actual_finish, String _task_detail, String _status) {
        final Function function = new Function(
                FUNC_ADDFISHBATCHTASK,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint64(_batch_id),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_task_head),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_task_name),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_plan_start),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_plan_finish),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_actual_start),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_actual_finish),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_task_detail),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_status)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] addfishBatchTask(BigInteger _batch_id, String _task_head, String _task_name, String _plan_start, String _plan_finish, String _actual_start, String _actual_finish, String _task_detail, String _status, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDFISHBATCHTASK,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint64(_batch_id),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_task_head),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_task_name),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_plan_start),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_plan_finish),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_actual_start),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_actual_finish),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_task_detail),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_status)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddfishBatchTask(BigInteger _batch_id, String _task_head, String _task_name, String _plan_start, String _plan_finish, String _actual_start, String _actual_finish, String _task_detail, String _status) {
        final Function function = new Function(
                FUNC_ADDFISHBATCHTASK,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint64(_batch_id),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_task_head),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_task_name),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_plan_start),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_plan_finish),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_actual_start),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_actual_finish),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_task_detail),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_status)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple9<BigInteger, String, String, String, String, String, String, String, String> getAddfishBatchTaskInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDFISHBATCHTASK,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple9<BigInteger, String, String, String, String, String, String, String, String>(

                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (String) results.get(3).getValue(),
                (String) results.get(4).getValue(),
                (String) results.get(5).getValue(),
                (String) results.get(6).getValue(),
                (String) results.get(7).getValue(),
                (String) results.get(8).getValue()
        );
    }

    public Tuple6<BigInteger, String, String, String, String, String> airQualityValueMapping(BigInteger param0) throws ContractException {
        final Function function = new Function(FUNC_AIRQUALITYVALUEMAPPING,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint64(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple6<BigInteger, String, String, String, String, String>(
                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (String) results.get(3).getValue(),
                (String) results.get(4).getValue(),
                (String) results.get(5).getValue());
    }

    public Tuple6<BigInteger, String, String, String, String, String> airQualityValues(BigInteger param0) throws ContractException {
        final Function function = new Function(FUNC_AIRQUALITYVALUES,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple6<BigInteger, String, String, String, String, String>(
                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (String) results.get(3).getValue(),
                (String) results.get(4).getValue(),
                (String) results.get(5).getValue());
    }

    public String breedingBatchName() throws ContractException {
        final Function function = new Function(FUNC_BREEDINGBATCHNAME,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public BigInteger catchTimestamp() throws ContractException {
        final Function function = new Function(FUNC_CATCHTIMESTAMP,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public Boolean checkFishProduct(String _id) throws ContractException {
        final Function function = new Function(FUNC_CHECKFISHPRODUCT,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_id)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public TransactionReceipt completeProcessing() {
        final Function function = new Function(
                FUNC_COMPLETEPROCESSING,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] completeProcessing(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_COMPLETEPROCESSING,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCompleteProcessing() {
        final Function function = new Function(
                FUNC_COMPLETEPROCESSING,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public String cropArea() throws ContractException {
        final Function function = new Function(FUNC_CROPAREA,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public Tuple8<BigInteger, String, String, String, String, String, String, Boolean> feedingMapping(BigInteger param0) throws ContractException {
        final Function function = new Function(FUNC_FEEDINGMAPPING,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint64(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bool>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple8<BigInteger, String, String, String, String, String, String, Boolean>(
                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (String) results.get(3).getValue(),
                (String) results.get(4).getValue(),
                (String) results.get(5).getValue(),
                (String) results.get(6).getValue(),
                (Boolean) results.get(7).getValue());
    }

    public Tuple8<BigInteger, String, String, String, String, String, String, Boolean> feedings(BigInteger param0) throws ContractException {
        final Function function = new Function(FUNC_FEEDINGS,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bool>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple8<BigInteger, String, String, String, String, String, String, Boolean>(
                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (String) results.get(3).getValue(),
                (String) results.get(4).getValue(),
                (String) results.get(5).getValue(),
                (String) results.get(6).getValue(),
                (Boolean) results.get(7).getValue());
    }

    public Tuple9<BigInteger, String, String, String, String, String, String, String, String> fishBatchTaskMapper(BigInteger param0) throws ContractException {
        final Function function = new Function(FUNC_FISHBATCHTASKMAPPER,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint64(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple9<BigInteger, String, String, String, String, String, String, String, String>(
                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (String) results.get(3).getValue(),
                (String) results.get(4).getValue(),
                (String) results.get(5).getValue(),
                (String) results.get(6).getValue(),
                (String) results.get(7).getValue(),
                (String) results.get(8).getValue());
    }

    public Tuple9<BigInteger, String, String, String, String, String, String, String, String> fishBatchTasks(BigInteger param0) throws ContractException {
        final Function function = new Function(FUNC_FISHBATCHTASKS,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple9<BigInteger, String, String, String, String, String, String, String, String>(
                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (String) results.get(3).getValue(),
                (String) results.get(4).getValue(),
                (String) results.get(5).getValue(),
                (String) results.get(6).getValue(),
                (String) results.get(7).getValue(),
                (String) results.get(8).getValue());
    }

    public BigInteger fishProductCount() throws ContractException {
        final Function function = new Function(FUNC_FISHPRODUCTCOUNT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public Tuple7<String, String, BigInteger, BigInteger, String, String, Boolean> fishProductMapping(String param0) throws ContractException {
        final Function function = new Function(FUNC_FISHPRODUCTMAPPING,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bool>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple7<String, String, BigInteger, BigInteger, String, String, Boolean>(
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue(),
                (BigInteger) results.get(3).getValue(),
                (String) results.get(4).getValue(),
                (String) results.get(5).getValue(),
                (Boolean) results.get(6).getValue());
    }

    public String fishVarieties() throws ContractException {
        final Function function = new Function(FUNC_FISHVARIETIES,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public DynamicArray<FishPondTraceabData.AirQualityValue> getAirQualityValues() throws ContractException {
        final Function function = new Function(FUNC_GETAIRQUALITYVALUES,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<FishPondTraceabData.AirQualityValue>>() {}));
        return executeCallWithSingleValueReturn(function, DynamicArray.class);
    }

    public DynamicArray<FishPondTraceabData.Feeding> getFeeding(List<BigInteger> _ids) throws ContractException {
        final Function function = new Function(FUNC_GETFEEDING,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Uint64>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(_ids, org.fisco.bcos.sdk.abi.datatypes.generated.Uint64.class))),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<FishPondTraceabData.Feeding>>() {}));
        return executeCallWithSingleValueReturn(function, DynamicArray.class);
    }

    public DynamicArray<FishPondTraceabData.Feeding> getFeedings() throws ContractException {
        final Function function = new Function(FUNC_GETFEEDINGS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<FishPondTraceabData.Feeding>>() {}));
        return executeCallWithSingleValueReturn(function, DynamicArray.class);
    }

    public FishPondTraceabData.FishProduct getFishProduct(String _id) throws ContractException {
        final Function function = new Function(FUNC_GETFISHPRODUCT,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_id)),
                Arrays.<TypeReference<?>>asList(new TypeReference<FishPondTraceabData.FishProduct>() {}));
        return executeCallWithSingleValueReturn(function, FishPondTraceabData.FishProduct.class);
    }

    public String getOfFishFarm() throws ContractException {
        final Function function = new Function(FUNC_GETOFFISHFARM,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public String getOwner() throws ContractException {
        final Function function = new Function(FUNC_GETOWNER,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public Tuple11<BigInteger, String, String, String, Boolean, String, String, BigInteger, String, Boolean, BigInteger> getPond() throws ContractException {
        final Function function = new Function(FUNC_GETPOND,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bool>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple11<BigInteger, String, String, String, Boolean, String, String, BigInteger, String, Boolean, BigInteger>(
                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (String) results.get(3).getValue(),
                (Boolean) results.get(4).getValue(),
                (String) results.get(5).getValue(),
                (String) results.get(6).getValue(),
                (BigInteger) results.get(7).getValue(),
                (String) results.get(8).getValue(),
                (Boolean) results.get(9).getValue(),
                (BigInteger) results.get(10).getValue());
    }

    public DynamicArray<FishPondTraceabData.WaterQualityValue> getWaterQualityValue(List<BigInteger> _ids) throws ContractException {
        final Function function = new Function(FUNC_GETWATERQUALITYVALUE,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Uint64>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(_ids, org.fisco.bcos.sdk.abi.datatypes.generated.Uint64.class))),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<FishPondTraceabData.WaterQualityValue>>() {}));
        return executeCallWithSingleValueReturn(function, DynamicArray.class);
    }

    public DynamicArray<FishPondTraceabData.WaterQualityValue> getWaterQualityValues() throws ContractException {
        final Function function = new Function(FUNC_GETWATERQUALITYVALUES,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<FishPondTraceabData.WaterQualityValue>>() {}));
        return executeCallWithSingleValueReturn(function, DynamicArray.class);
    }

    public DynamicArray<FishPondTraceabData.FishBatchTask> getfishBatchTask(List<BigInteger> _batch_ids) throws ContractException {
        final Function function = new Function(FUNC_GETFISHBATCHTASK,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Uint64>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(_batch_ids, org.fisco.bcos.sdk.abi.datatypes.generated.Uint64.class))),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<FishPondTraceabData.FishBatchTask>>() {}));
        return executeCallWithSingleValueReturn(function, DynamicArray.class);
    }

    public BigInteger id() throws ContractException {
        final Function function = new Function(FUNC_ID,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public Boolean isCaught() throws ContractException {
        final Function function = new Function(FUNC_ISCAUGHT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public Boolean isProcessed() throws ContractException {
        final Function function = new Function(FUNC_ISPROCESSED,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public TransactionReceipt modifyFeeding(BigInteger _id, String _feedName, String _quantityUsed, String _unit, String _startDate, String _endDate, String _notes) {
        final Function function = new Function(
                FUNC_MODIFYFEEDING,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint64(_id),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_feedName),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_quantityUsed),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_unit),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_startDate),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_endDate),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_notes)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] modifyFeeding(BigInteger _id, String _feedName, String _quantityUsed, String _unit, String _startDate, String _endDate, String _notes, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_MODIFYFEEDING,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint64(_id),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_feedName),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_quantityUsed),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_unit),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_startDate),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_endDate),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_notes)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForModifyFeeding(BigInteger _id, String _feedName, String _quantityUsed, String _unit, String _startDate, String _endDate, String _notes) {
        final Function function = new Function(
                FUNC_MODIFYFEEDING,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint64(_id),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_feedName),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_quantityUsed),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_unit),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_startDate),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_endDate),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_notes)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple7<BigInteger, String, String, String, String, String, String> getModifyFeedingInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_MODIFYFEEDING,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple7<BigInteger, String, String, String, String, String, String>(

                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (String) results.get(3).getValue(),
                (String) results.get(4).getValue(),
                (String) results.get(5).getValue(),
                (String) results.get(6).getValue()
        );
    }

    public TransactionReceipt modifyFishProduct(String _id, String _productName, BigInteger _quality, String _weight, String _notes) {
        final Function function = new Function(
                FUNC_MODIFYFISHPRODUCT,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_id),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_productName),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_quality),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_weight),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_notes)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] modifyFishProduct(String _id, String _productName, BigInteger _quality, String _weight, String _notes, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_MODIFYFISHPRODUCT,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_id),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_productName),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_quality),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_weight),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_notes)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForModifyFishProduct(String _id, String _productName, BigInteger _quality, String _weight, String _notes) {
        final Function function = new Function(
                FUNC_MODIFYFISHPRODUCT,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_id),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_productName),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_quality),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_weight),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_notes)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple5<String, String, BigInteger, String, String> getModifyFishProductInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_MODIFYFISHPRODUCT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<String, String, BigInteger, String, String>(

                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue(),
                (String) results.get(3).getValue(),
                (String) results.get(4).getValue()
        );
    }

    public TransactionReceipt modifyIsCaught(Boolean _isCaught) {
        final Function function = new Function(
                FUNC_MODIFYISCAUGHT,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Bool(_isCaught)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] modifyIsCaught(Boolean _isCaught, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_MODIFYISCAUGHT,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Bool(_isCaught)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForModifyIsCaught(Boolean _isCaught) {
        final Function function = new Function(
                FUNC_MODIFYISCAUGHT,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Bool(_isCaught)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<Boolean> getModifyIsCaughtInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_MODIFYISCAUGHT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
        );
    }

    public TransactionReceipt modifyOfFishFarm(String _newOfFishFarm) {
        final Function function = new Function(
                FUNC_MODIFYOFFISHFARM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_newOfFishFarm)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] modifyOfFishFarm(String _newOfFishFarm, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_MODIFYOFFISHFARM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_newOfFishFarm)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForModifyOfFishFarm(String _newOfFishFarm) {
        final Function function = new Function(
                FUNC_MODIFYOFFISHFARM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_newOfFishFarm)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getModifyOfFishFarmInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_MODIFYOFFISHFARM,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
        );
    }

    public TransactionReceipt modifyPondInfo(String _pondName, String _fishVarieties, String _breedingBatchName, String _releaseDate, String _notes) {
        final Function function = new Function(
                FUNC_MODIFYPONDINFO,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_pondName),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_fishVarieties),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_breedingBatchName),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_releaseDate),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_notes)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] modifyPondInfo(String _pondName, String _fishVarieties, String _breedingBatchName, String _releaseDate, String _notes, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_MODIFYPONDINFO,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_pondName),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_fishVarieties),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_breedingBatchName),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_releaseDate),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_notes)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForModifyPondInfo(String _pondName, String _fishVarieties, String _breedingBatchName, String _releaseDate, String _notes) {
        final Function function = new Function(
                FUNC_MODIFYPONDINFO,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_pondName),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_fishVarieties),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_breedingBatchName),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_releaseDate),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_notes)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple5<String, String, String, String, String> getModifyPondInfoInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_MODIFYPONDINFO,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<String, String, String, String, String>(

                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (String) results.get(3).getValue(),
                (String) results.get(4).getValue()
        );
    }

    public Tuple8<BigInteger, String, String, String, String, String, String, Boolean> narcotics(BigInteger param0) throws ContractException {
        final Function function = new Function(FUNC_NARCOTICS,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bool>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple8<BigInteger, String, String, String, String, String, String, Boolean>(
                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (String) results.get(3).getValue(),
                (String) results.get(4).getValue(),
                (String) results.get(5).getValue(),
                (String) results.get(6).getValue(),
                (Boolean) results.get(7).getValue());
    }

    public Tuple8<BigInteger, String, String, String, String, String, String, Boolean> narcoticsMapping(BigInteger param0) throws ContractException {
        final Function function = new Function(FUNC_NARCOTICSMAPPING,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint64(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bool>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple8<BigInteger, String, String, String, String, String, String, Boolean>(
                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (String) results.get(3).getValue(),
                (String) results.get(4).getValue(),
                (String) results.get(5).getValue(),
                (String) results.get(6).getValue(),
                (Boolean) results.get(7).getValue());
    }

    public String notes() throws ContractException {
        final Function function = new Function(FUNC_NOTES,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public String ofFishFarm() throws ContractException {
        final Function function = new Function(FUNC_OFFISHFARM,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public String owner() throws ContractException {
        final Function function = new Function(FUNC_OWNER,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public String pondName() throws ContractException {
        final Function function = new Function(FUNC_PONDNAME,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public String releaseDate() throws ContractException {
        final Function function = new Function(FUNC_RELEASEDATE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt removeFishProduct(String _id) {
        final Function function = new Function(
                FUNC_REMOVEFISHPRODUCT,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_id)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] removeFishProduct(String _id, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REMOVEFISHPRODUCT,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_id)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRemoveFishProduct(String _id) {
        final Function function = new Function(
                FUNC_REMOVEFISHPRODUCT,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_id)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getRemoveFishProductInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REMOVEFISHPRODUCT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
        );
    }

    public TransactionReceipt updatefishBatchTask(BigInteger _batch_id, String _task_head, String _task_name, String _plan_start, String _plan_finish, String _actual_start, String _actual_finish, String _task_detail, String _status) {
        final Function function = new Function(
                FUNC_UPDATEFISHBATCHTASK,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint64(_batch_id),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_task_head),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_task_name),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_plan_start),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_plan_finish),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_actual_start),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_actual_finish),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_task_detail),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_status)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] updatefishBatchTask(BigInteger _batch_id, String _task_head, String _task_name, String _plan_start, String _plan_finish, String _actual_start, String _actual_finish, String _task_detail, String _status, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATEFISHBATCHTASK,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint64(_batch_id),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_task_head),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_task_name),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_plan_start),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_plan_finish),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_actual_start),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_actual_finish),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_task_detail),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_status)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdatefishBatchTask(BigInteger _batch_id, String _task_head, String _task_name, String _plan_start, String _plan_finish, String _actual_start, String _actual_finish, String _task_detail, String _status) {
        final Function function = new Function(
                FUNC_UPDATEFISHBATCHTASK,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint64(_batch_id),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_task_head),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_task_name),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_plan_start),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_plan_finish),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_actual_start),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_actual_finish),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_task_detail),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_status)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple9<BigInteger, String, String, String, String, String, String, String, String> getUpdatefishBatchTaskInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATEFISHBATCHTASK,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple9<BigInteger, String, String, String, String, String, String, String, String>(

                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (String) results.get(3).getValue(),
                (String) results.get(4).getValue(),
                (String) results.get(5).getValue(),
                (String) results.get(6).getValue(),
                (String) results.get(7).getValue(),
                (String) results.get(8).getValue()
        );
    }

    public Tuple10<BigInteger, String, String, String, String, String, String, String, String, String> waterQualityValueMapping(BigInteger param0) throws ContractException {
        final Function function = new Function(FUNC_WATERQUALITYVALUEMAPPING,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint64(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple10<BigInteger, String, String, String, String, String, String, String, String, String>(
                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (String) results.get(3).getValue(),
                (String) results.get(4).getValue(),
                (String) results.get(5).getValue(),
                (String) results.get(6).getValue(),
                (String) results.get(7).getValue(),
                (String) results.get(8).getValue(),
                (String) results.get(9).getValue());
    }

    public Tuple10<BigInteger, String, String, String, String, String, String, String, String, String> waterQualityValues(BigInteger param0) throws ContractException {
        final Function function = new Function(FUNC_WATERQUALITYVALUES,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple10<BigInteger, String, String, String, String, String, String, String, String, String>(
                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (String) results.get(3).getValue(),
                (String) results.get(4).getValue(),
                (String) results.get(5).getValue(),
                (String) results.get(6).getValue(),
                (String) results.get(7).getValue(),
                (String) results.get(8).getValue(),
                (String) results.get(9).getValue());
    }

    public static FishPondTraceabData load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new FishPondTraceabData(contractAddress, client, credential);
    }

    public static FishPondTraceabData deploy(Client client, CryptoKeyPair credential, String _owner, BigInteger _traceabId, String _pondName, String _fishVarieties, String _breedingBatchName, String _releaseDate, String _ofFishFarm, String _notes, String _cropArea) throws ContractException {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner),
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_traceabId),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_pondName),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_fishVarieties),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_breedingBatchName),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_releaseDate),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_ofFishFarm),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_notes),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_cropArea)));
        return deploy(FishPondTraceabData.class, client, credential, getBinary(client.getCryptoSuite()), encodedConstructor);
    }

    public static FishPondTraceabData deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(FishPondTraceabData.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }

    public static class AirQualityValue extends DynamicStruct {
        public BigInteger id;

        public String airQuality;

        public String temperature;

        public String humidity;

        public String pressure;

        public String qualityDate;

        public AirQualityValue(Uint64 id, Utf8String airQuality, Utf8String temperature, Utf8String humidity, Utf8String pressure, Utf8String qualityDate) {
            super(id,airQuality,temperature,humidity,pressure,qualityDate);
            this.id = id.getValue();
            this.airQuality = airQuality.getValue();
            this.temperature = temperature.getValue();
            this.humidity = humidity.getValue();
            this.pressure = pressure.getValue();
            this.qualityDate = qualityDate.getValue();
        }

        public AirQualityValue(BigInteger id, String airQuality, String temperature, String humidity, String pressure, String qualityDate) {
            super(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint64(id),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(airQuality),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(temperature),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(humidity),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(pressure),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(qualityDate));
            this.id = id;
            this.airQuality = airQuality;
            this.temperature = temperature;
            this.humidity = humidity;
            this.pressure = pressure;
            this.qualityDate = qualityDate;
        }
    }

    public static class Feeding extends DynamicStruct {
        public BigInteger id;

        public String feedName;

        public String quantityUsed;

        public String unit;

        public String startDate;

        public String endDate;

        public String notes;

        public Boolean exist;

        public Feeding(Uint64 id, Utf8String feedName, Utf8String quantityUsed, Utf8String unit, Utf8String startDate, Utf8String endDate, Utf8String notes, Bool exist) {
            super(id,feedName,quantityUsed,unit,startDate,endDate,notes,exist);
            this.id = id.getValue();
            this.feedName = feedName.getValue();
            this.quantityUsed = quantityUsed.getValue();
            this.unit = unit.getValue();
            this.startDate = startDate.getValue();
            this.endDate = endDate.getValue();
            this.notes = notes.getValue();
            this.exist = exist.getValue();
        }

        public Feeding(BigInteger id, String feedName, String quantityUsed, String unit, String startDate, String endDate, String notes, Boolean exist) {
            super(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint64(id),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(feedName),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(quantityUsed),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(unit),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(startDate),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(endDate),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(notes),new org.fisco.bcos.sdk.abi.datatypes.Bool(exist));
            this.id = id;
            this.feedName = feedName;
            this.quantityUsed = quantityUsed;
            this.unit = unit;
            this.startDate = startDate;
            this.endDate = endDate;
            this.notes = notes;
            this.exist = exist;
        }
    }

    public static class FishProduct extends DynamicStruct {
        public String id;

        public String productName;

        public BigInteger quality;

        public BigInteger processingTimestamp;

        public String weight;

        public String notes;

        public Boolean exist;

        public FishProduct(Utf8String id, Utf8String productName, Uint256 quality, Uint256 processingTimestamp, Utf8String weight, Utf8String notes, Bool exist) {
            super(id,productName,quality,processingTimestamp,weight,notes,exist);
            this.id = id.getValue();
            this.productName = productName.getValue();
            this.quality = quality.getValue();
            this.processingTimestamp = processingTimestamp.getValue();
            this.weight = weight.getValue();
            this.notes = notes.getValue();
            this.exist = exist.getValue();
        }

        public FishProduct(String id, String productName, BigInteger quality, BigInteger processingTimestamp, String weight, String notes, Boolean exist) {
            super(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(id),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(productName),new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(quality),new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(processingTimestamp),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(weight),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(notes),new org.fisco.bcos.sdk.abi.datatypes.Bool(exist));
            this.id = id;
            this.productName = productName;
            this.quality = quality;
            this.processingTimestamp = processingTimestamp;
            this.weight = weight;
            this.notes = notes;
            this.exist = exist;
        }
    }

    public static class WaterQualityValue extends DynamicStruct {
        public BigInteger id;

        public String deviceId;

        public String date;

        public String temperature;

        public String dissolvedOxygen;

        public String phValue;

        public String ammoniaNitrogen;

        public String nitriteContent;

        public String oxygenContent;

        public String hardness;

        public WaterQualityValue(Uint64 id, Utf8String deviceId, Utf8String date, Utf8String temperature, Utf8String dissolvedOxygen, Utf8String phValue, Utf8String ammoniaNitrogen, Utf8String nitriteContent, Utf8String oxygenContent, Utf8String hardness) {
            super(id,deviceId,date,temperature,dissolvedOxygen,phValue,ammoniaNitrogen,nitriteContent,oxygenContent,hardness);
            this.id = id.getValue();
            this.deviceId = deviceId.getValue();
            this.date = date.getValue();
            this.temperature = temperature.getValue();
            this.dissolvedOxygen = dissolvedOxygen.getValue();
            this.phValue = phValue.getValue();
            this.ammoniaNitrogen = ammoniaNitrogen.getValue();
            this.nitriteContent = nitriteContent.getValue();
            this.oxygenContent = oxygenContent.getValue();
            this.hardness = hardness.getValue();
        }

        public WaterQualityValue(BigInteger id, String deviceId, String date, String temperature, String dissolvedOxygen, String phValue, String ammoniaNitrogen, String nitriteContent, String oxygenContent, String hardness) {
            super(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint64(id),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(deviceId),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(date),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(temperature),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(dissolvedOxygen),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(phValue),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ammoniaNitrogen),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(nitriteContent),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(oxygenContent),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(hardness));
            this.id = id;
            this.deviceId = deviceId;
            this.date = date;
            this.temperature = temperature;
            this.dissolvedOxygen = dissolvedOxygen;
            this.phValue = phValue;
            this.ammoniaNitrogen = ammoniaNitrogen;
            this.nitriteContent = nitriteContent;
            this.oxygenContent = oxygenContent;
            this.hardness = hardness;
        }
    }

    public static class FishBatchTask extends DynamicStruct {
        public BigInteger batch_id;

        public String task_head;

        public String task_name;

        public String plan_start;

        public String plan_finish;

        public String actual_start;

        public String actual_finish;

        public String task_detail;

        public String status;

        public FishBatchTask(Uint64 batch_id, Utf8String task_head, Utf8String task_name, Utf8String plan_start, Utf8String plan_finish, Utf8String actual_start, Utf8String actual_finish, Utf8String task_detail, Utf8String status) {
            super(batch_id,task_head,task_name,plan_start,plan_finish,actual_start,actual_finish,task_detail,status);
            this.batch_id = batch_id.getValue();
            this.task_head = task_head.getValue();
            this.task_name = task_name.getValue();
            this.plan_start = plan_start.getValue();
            this.plan_finish = plan_finish.getValue();
            this.actual_start = actual_start.getValue();
            this.actual_finish = actual_finish.getValue();
            this.task_detail = task_detail.getValue();
            this.status = status.getValue();
        }

        public FishBatchTask(BigInteger batch_id, String task_head, String task_name, String plan_start, String plan_finish, String actual_start, String actual_finish, String task_detail, String status) {
            super(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint64(batch_id),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(task_head),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(task_name),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(plan_start),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(plan_finish),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(actual_start),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(actual_finish),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(task_detail),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(status));
            this.batch_id = batch_id;
            this.task_head = task_head;
            this.task_name = task_name;
            this.plan_start = plan_start;
            this.plan_finish = plan_finish;
            this.actual_start = actual_start;
            this.actual_finish = actual_finish;
            this.task_detail = task_detail;
            this.status = status;
        }
    }

    public static class UnauthorizedAccessEventResponse {
        public TransactionReceipt.Logs log;

        public String caller;

        public String contractOwner;
    }
}
